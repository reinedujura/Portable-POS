# streamlit.py - Portable POS Frontend

import streamlit as st  # Web UI framework

from mongodb import DatabaseManager  # Import our database manager

from datetime import datetime  # For timestamps

from models.menu import MENU_CATEGORIES  # Import menu categories for dropdown

from models.transaction import TransactionItem  # Import transaction models

from decimal import Decimal  # For precise money calculations

import pandas as pd  # For Excel export

from io import BytesIO  # For file handling

import sys
import os
from pathlib import Path

# Add backend to path for AI Agent imports
sys.path.insert(0, str(Path(__file__).parent / 'backend'))

try:
    from agents import (
        generate_sales_forecast,
        generate_customer_insights,
        generate_menu_optimization,
        generate_marketing_insights,
        detect_anomalies
    )
    AI_AVAILABLE = True
except ImportError as e:
    AI_AVAILABLE = False
    AI_ERROR = str(e)



# Excel-related imports with fallback

try:

    import openpyxl

    from openpyxl.styles import Font, Alignment

    EXCEL_AVAILABLE = True

except ImportError:

    EXCEL_AVAILABLE = False

    # Create dummy classes to prevent errors

    class Font:

        def __init__(self, **kwargs):

            pass

    class Alignment:

        def __init__(self, **kwargs):

            pass



# PDF-related imports

try:

    from reportlab.lib.pagesizes import letter, A4

    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer

    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

    from reportlab.lib import colors

    from reportlab.lib.units import inch

    PDF_AVAILABLE = True

    PDF_ERROR = None

except ImportError as e:

    PDF_AVAILABLE = False

    PDF_ERROR = str(e)



def generate_receipt_text(receipt_data):

    """Generate a formatted text receipt"""

    receipt = []

    receipt.append("=" * 50)

    receipt.append(f"        {receipt_data.get('business_name','').upper()}")

    receipt.append("=" * 50)

    receipt.append(f"Transaction ID: {receipt_data.get('transaction_id','')}")

    receipt.append(f"Date & Time: {receipt_data.get('date_time','')}")

    receipt.append(f"Customer: {receipt_data.get('customer_name') or 'Walk-in'}")

    receipt.append("-" * 50)



    # Items

    receipt.append("ITEMS:")

    for item in receipt_data.get('items', []):

        receipt.append(f"{item.get('quantity',1)}x {item.get('offering_name','')}")

        receipt.append(f"    @ MYR {float(item.get('unit_price',0)):.2f} = MYR {float(item.get('total_price',0)):.2f}")



    receipt.append("-" * 50)

    receipt.append(f"Subtotal:        MYR {receipt_data.get('subtotal',0):.2f}")



    if receipt_data.get('discount_amount', 0) > 0:

        receipt.append(f"Discount:       -MYR {receipt_data.get('discount_amount',0):.2f}")



    if receipt_data.get('tax_amount', 0) > 0:

        receipt.append(f"Tax/VAT:        +MYR {receipt_data.get('tax_amount',0):.2f}")



    receipt.append("=" * 50)

    receipt.append(f"TOTAL:           MYR {receipt_data.get('final_total',0):.2f}")

    receipt.append("=" * 50)



    receipt.append(f"Payment Method: {receipt_data.get('payment_method','')}")

    if receipt_data.get('amount_tendered'):

        receipt.append(f"Amount Tendered: MYR {receipt_data.get('amount_tendered',0):.2f}")

        receipt.append(f"Change Given:    MYR {receipt_data.get('change_given',0):.2f}")



    if receipt_data.get('notes'):

        receipt.append("-" * 50)

        receipt.append(f"Notes: {receipt_data.get('notes')}")



    receipt.append("-" * 50)

    receipt.append("Thank you for your business!")

    receipt.append("Please keep this receipt for your records.")

    receipt.append("=" * 50)



    return "\n".join(receipt)



def generate_receipt_csv(receipt_data):

    """Generate CSV format receipt data"""

    csv_lines = []

    csv_lines.append("Field,Value")

    csv_lines.append(f"Business,{receipt_data['business_name']}")

    csv_lines.append(f"Transaction ID,{receipt_data['transaction_id']}")

    csv_lines.append(f"Date Time,{receipt_data['date_time']}")

    csv_lines.append(f"Customer,{receipt_data['customer_name']}")

    csv_lines.append(f"Payment Method,{receipt_data['payment_method']}")

    csv_lines.append(f"Subtotal,{receipt_data['subtotal']:.2f}")

    csv_lines.append(f"Discount,{receipt_data['discount_amount']:.2f}")

    csv_lines.append(f"Tax,{receipt_data['tax_amount']:.2f}")

    csv_lines.append(f"Total,{receipt_data['final_total']:.2f}")



    if receipt_data['amount_tendered']:

        csv_lines.append(f"Amount Tendered,{receipt_data['amount_tendered']:.2f}")

        csv_lines.append(f"Change Given,{receipt_data['change_given']:.2f}")



    csv_lines.append("")

    csv_lines.append("Item,Quantity,Unit Price,Total")

    for item in receipt_data['items']:

        csv_lines.append(f"{item['offering_name']},{item['quantity']},{item['unit_price']},{item['total_price']}")



    return "\n".join(csv_lines)



def generate_sales_excel(transactions, business_name):

    """Generate Excel format for sales listing"""

    if not EXCEL_AVAILABLE:

        raise ImportError("openpyxl package not found. Please install it with: pip install openpyxl")



    # Prepare data for DataFrame

    sales_data = []

    for trans in transactions:

        items_summary = "; ".join([f"{item.get('quantity', 1)}x {item.get('offering_name', 'Unknown')}" 

                                 for item in trans.get('items', [])])



        sales_data.append({

            'Date': trans.get('sale_date', str(trans.get('created_at', ''))[:10]),

            'Transaction ID': str(trans['_id'])[:8],

            'Customer': trans.get('customer_name') or 'Walk-in',

            'Items': items_summary,

            'Total Amount (MYR)': float(trans['total_amount']),

            'Payment Method': extract_payment_method(trans.get('notes', '')),

            'Notes': trans.get('notes', '')

        })



    df = pd.DataFrame(sales_data)



    # Create Excel file

    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:

        df.to_excel(writer, sheet_name='Sales Report', index=False)



        # Get the workbook and worksheet

        workbook = writer.book

        worksheet = writer.sheets['Sales Report']



        # Add header with business name

        worksheet.insert_rows(1, 3)

        worksheet['A1'] = business_name.upper()

        worksheet['A2'] = 'SALES REPORT'

        worksheet['A3'] = f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}'



        # Format header

        worksheet['A1'].font = Font(bold=True, size=16)

        worksheet['A2'].font = Font(bold=True, size=14)

        worksheet['A3'].font = Font(size=10)



        # Auto-adjust column widths

        for column in worksheet.columns:

            max_length = 0

            column_letter = column[0].column_letter

            for cell in column:

                try:

                    if len(str(cell.value)) > max_length:

                        max_length = len(str(cell.value))

                except:

                    pass

            adjusted_width = min(max_length + 2, 50)

            worksheet.column_dimensions[column_letter].width = adjusted_width



    output.seek(0)

    return output.getvalue()



def generate_customers_excel(customers, business_name):

    """Generate Excel format for customer listing"""

    if not EXCEL_AVAILABLE:

        raise ImportError("openpyxl package not found. Please install it with: pip install openpyxl")



    # Prepare data for DataFrame

    customer_data = []

    for customer in customers:

        customer_data.append({

            'Customer ID': customer.get('customer_id', 'N/A'),

            'Name': customer['name'],

            'Phone': customer.get('phone', 'Not provided'),

            'Email': customer.get('email', 'Not provided'),

            'Birthday': customer.get('birthday', 'Not provided'),

            'Total Visits': customer.get('total_visits', 0),

            'Total Spent (MYR)': customer.get('total_spent', 0),

            'Member Since': str(customer.get('created_at', ''))[:10],

            'Notes': customer.get('notes', '')

        })



    df = pd.DataFrame(customer_data)



    # Create Excel file

    output = BytesIO()

    with pd.ExcelWriter(output, engine='openpyxl') as writer:

        df.to_excel(writer, sheet_name='Customer Report', index=False)



        # Get the workbook and worksheet

        workbook = writer.book

        worksheet = writer.sheets['Customer Report']



        # Add header with business name

        worksheet.insert_rows(1, 3)

        worksheet['A1'] = business_name.upper()

        worksheet['A2'] = 'CUSTOMER LISTING'

        worksheet['A3'] = f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}'



        # Format header

        worksheet['A1'].font = Font(bold=True, size=16)

        worksheet['A2'].font = Font(bold=True, size=14)

        worksheet['A3'].font = Font(size=10)



        # Auto-adjust column widths

        for column in worksheet.columns:

            max_length = 0

            column_letter = column[0].column_letter

            for cell in column:

                try:

                    if len(str(cell.value)) > max_length:

                        max_length = len(str(cell.value))

                except:

                    pass

            adjusted_width = min(max_length + 2, 50)

            worksheet.column_dimensions[column_letter].width = adjusted_width



    output.seek(0)

    return output.getvalue()



def extract_payment_method(notes):

    """Extract payment method from transaction notes"""

    if 'Payment: Cash' in notes:

        return 'Cash'

    elif 'Payment: Card' in notes:

        return 'Card'

    elif 'Payment: E-Wallet' in notes:

        return 'E-Wallet'

    elif 'Payment: Bank Transfer' in notes:

        return 'Bank Transfer'

    else:

        return 'Unknown'



def generate_sales_pdf_html(transactions, business_name):

    """Generate HTML for PDF conversion of sales listing"""

    html = f"""

    <html>

    <head>

        <style>

            body {{ font-family: Arial, sans-serif; margin: 20px; }}

            .header {{ text-align: center; margin-bottom: 30px; }}

            .company-name {{ font-size: 18px; font-weight: bold; }}

            .report-title {{ font-size: 16px; font-weight: bold; margin: 10px 0; }}

            .report-date {{ font-size: 12px; color: #666; }}

            table {{ width: 100%; border-collapse: collapse; font-size: 10px; }}

            th, td {{ border: 1px solid #ddd; padding: 6px; text-align: left; }}

            th {{ background-color: #f2f2f2; font-weight: bold; }}

            .amount {{ text-align: right; }}

            .footer {{ margin-top: 20px; font-size: 10px; color: #666; }}

        </style>

    </head>

    <body>

        <div class="header">

            <div class="company-name">{business_name.upper()}</div>

            <div class="report-title">SALES REPORT</div>

            <div class="report-date">Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}</div>

        </div>



        <table>

            <thead>

                <tr>

                    <th>Date</th>

                    <th>Transaction ID</th>

                    <th>Customer</th>

                    <th>Items</th>

                    <th>Amount (MYR)</th>

                    <th>Payment</th>

                </tr>

            </thead>

            <tbody>

    """



    total_amount = 0

    for trans in transactions:

        items_summary = "; ".join([f"{item.get('quantity', 1)}x {item.get('offering_name', 'Unknown')}" 

                                 for item in trans.get('items', [])][:100])  # Limit length

        amount = float(trans['total_amount'])

        total_amount += amount



        html += f"""

                <tr>

                    <td>{trans.get('sale_date', str(trans.get('created_at', ''))[:10])}</td>

                    <td>{str(trans['_id'])[:8]}</td>

                    <td>{trans.get('customer_name') or 'Walk-in'}</td>

                    <td>{items_summary}</td>

                    <td class="amount">{amount:.2f}</td>

                    <td>{extract_payment_method(trans.get('notes', ''))}</td>

                </tr>

"""



    html += f"""

            </tbody>

        </table>



        <div class="footer">

            <p><strong>Total Transactions: {len(transactions)} | Total Revenue: MYR {total_amount:.2f}</strong></p>

            <p>This report contains {len(transactions)} transactions. Generated by Portable POS System.</p>

        </div>

    </body>

    </html>

    """



    return html



def generate_receipt_pdf(transaction, business_name):

    """Generate actual PDF receipt for single transaction"""

    if not PDF_AVAILABLE:

        raise ImportError("reportlab package not available")



    # Create PDF buffer

    buffer = BytesIO()



    # Create the PDF document with A4 size

    doc = SimpleDocTemplate(buffer, pagesize=A4, 

                          rightMargin=72, leftMargin=72, 

                          topMargin=72, bottomMargin=18)



    # Build the content

    story = []

    styles = getSampleStyleSheet()



    # Header style

    header_style = ParagraphStyle(

        'CustomHeader',

        parent=styles['Heading1'],

        fontSize=16,

        spaceAfter=12,

        alignment=1,  # Center alignment

        textColor=colors.black

    )



    # Normal style

    normal_style = ParagraphStyle(

        'CustomNormal',

        parent=styles['Normal'],

        fontSize=11,

        spaceAfter=6,

        alignment=0  # Left alignment

    )



    # Title and business info

    story.append(Paragraph(f"<b>{business_name.upper()}</b>", header_style))

    story.append(Paragraph("TRANSACTION RECEIPT", header_style))

    story.append(Spacer(1, 20))



    # Transaction details

    story.append(Paragraph(f"<b>Transaction ID:</b> {str(transaction['_id'])[:8]}", normal_style))

    story.append(Paragraph(f"<b>Date:</b> {transaction.get('sale_date', 'Unknown')}", normal_style))

    story.append(Paragraph(f"<b>Customer:</b> {transaction.get('customer_name') or 'Walk-in'}", normal_style))

    story.append(Spacer(1, 15))



    # Items table

    if transaction.get('items'):

        # Prepare table data

        table_data = [['Item', 'Qty', 'Unit Price (MYR)', 'Total (MYR)']]



        for item in transaction.get('items', []):

            table_data.append([

                item.get('offering_name', 'Unknown'),

                str(item.get('quantity', 1)),

                f"{float(item.get('unit_price', 0)):.2f}",

                f"{float(item.get('total_price', 0)):.2f}"

            ])



        # Create table

        table = Table(table_data, colWidths=[3*inch, 0.8*inch, 1.2*inch, 1.2*inch])

        table.setStyle(TableStyle([

            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),

            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),

            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),

            ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),  # Right align numbers

            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),

            ('FONTSIZE', (0, 0), (-1, 0), 12),

            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),

            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),

            ('GRID', (0, 0), (-1, -1), 1, colors.black)

        ]))



        story.append(table)

        story.append(Spacer(1, 15))



    # Total

    story.append(Paragraph(f"<b>TOTAL: MYR {transaction['total_amount']}</b>", 

                          ParagraphStyle('Total', parent=styles['Normal'], fontSize=14, alignment=2)))



    # Footer

    if transaction.get('notes'):

        story.append(Spacer(1, 10))

        story.append(Paragraph(f"<b>Notes:</b> {transaction['notes']}", normal_style))



    story.append(Spacer(1, 20))

    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", 

                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=9, alignment=1)))



    # Build PDF

    doc.build(story)

    buffer.seek(0)



    return buffer.getvalue()



def generate_sales_report_pdf(transactions, business_name):

    """Generate actual PDF for sales report with all transactions"""

    if not PDF_AVAILABLE:

        raise ImportError("reportlab package not available")



    # Create PDF buffer

    buffer = BytesIO()



    # Create the PDF document with A4 size

    doc = SimpleDocTemplate(buffer, pagesize=A4, 

                          rightMargin=72, leftMargin=72, 

                          topMargin=72, bottomMargin=18)



    # Build the content

    story = []

    styles = getSampleStyleSheet()



    # Header style

    header_style = ParagraphStyle(

        'CustomHeader',

        parent=styles['Heading1'],

        fontSize=16,

        spaceAfter=12,

        alignment=1,  # Center alignment

        textColor=colors.black

    )



    # Normal style

    normal_style = ParagraphStyle(

        'CustomNormal',

        parent=styles['Normal'],

        fontSize=10,

        spaceAfter=6,

        alignment=0  # Left alignment

    )



    # Title and business info

    story.append(Paragraph(f"<b>{business_name.upper()}</b>", header_style))

    story.append(Paragraph("SALES REPORT", header_style))

    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", normal_style))

    story.append(Paragraph(f"Total Transactions: {len(transactions)}", normal_style))

    story.append(Spacer(1, 20))



    # Sales summary table

    if transactions:

        # Calculate totals with null safety

        total_sales = 0

        for t in transactions:

            if t and t.get('total_amount'):

                try:

                    total_sales += float(t.get('total_amount', 0))

                except (ValueError, TypeError):

                    continue



        # Summary info

        story.append(Paragraph(f"<b>SUMMARY</b>", normal_style))

        story.append(Paragraph(f"Total Sales: MYR {total_sales:.2f}", normal_style))

        story.append(Spacer(1, 15))



        # Transactions table

        story.append(Paragraph(f"<b>DETAILED TRANSACTIONS</b>", normal_style))

        story.append(Spacer(1, 10))



        # Prepare table data

        table_data = [['Date', 'ID', 'Customer', 'Items', 'Total (MYR)']]



        for transaction in transactions:

            # Skip if transaction is None

            if not transaction:

                continue



            # Get items summary with null checks

            items = transaction.get('items', [])

            if items and isinstance(items, list):

                items_summary = "; ".join([f"{item.get('quantity', 1) if item else 1}x {item.get('offering_name', 'Unknown') if item else 'Unknown'}" 

                                         for item in items if item])

            else:

                items_summary = "No items"



            if len(items_summary) > 50:  # Truncate if too long

                items_summary = items_summary[:47] + "..."



            # Safe date handling

            sale_date = transaction.get('sale_date', 'Unknown')

            if sale_date and len(sale_date) >= 10:

                date_str = sale_date[:10]

            else:

                date_str = 'Unknown'



            # Safe customer name handling

            customer_name = transaction.get('customer_name') or 'Walk-in'

            if customer_name and len(customer_name) > 15:

                customer_name = customer_name[:15]

            elif not customer_name:

                customer_name = 'Walk-in'



            # Safe ID handling

            transaction_id = transaction.get('_id', 'Unknown')

            if transaction_id:

                id_str = str(transaction_id)[:8]

            else:

                id_str = 'Unknown'



            # Safe total amount handling

            total_amount = transaction.get('total_amount', 0)

            try:

                amount_str = f"{float(total_amount):.2f}"

            except (ValueError, TypeError):

                amount_str = "0.00"



            table_data.append([

                date_str,

                id_str,

                customer_name,

                items_summary,

                amount_str

            ])



        # Create table with appropriate column widths

        table = Table(table_data, colWidths=[1*inch, 1*inch, 1.5*inch, 3*inch, 1*inch])

        table.setStyle(TableStyle([

            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),

            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),

            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),

            ('ALIGN', (4, 0), (4, -1), 'RIGHT'),  # Right align amounts

            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),

            ('FONTSIZE', (0, 0), (-1, 0), 9),

            ('FONTSIZE', (0, 1), (-1, -1), 8),  # Smaller font for data rows

            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),

            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),

            ('GRID', (0, 0), (-1, -1), 1, colors.black),

            ('VALIGN', (0, 0), (-1, -1), 'TOP'),

        ]))



        story.append(table)



    # Footer

    story.append(Spacer(1, 20))

    story.append(Paragraph(f"Report generated by {business_name} POS System", 

                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=1)))



    # Build PDF

    doc.build(story)

    buffer.seek(0)



    return buffer.getvalue()



def generate_customers_pdf_html(customers, business_name):

    """Generate HTML for PDF conversion of customer listing"""

    html = f"""

    <html>

    <head>

        <style>

            body {{ font-family: Arial, sans-serif; margin: 20px; }}

            .header {{ text-align: center; margin-bottom: 30px; }}

            .company-name {{ font-size: 18px; font-weight: bold; }}

            .report-title {{ font-size: 16px; font-weight: bold; margin: 10px 0; }}

            .report-date {{ font-size: 12px; color: #666; }}

            table {{ width: 100%; border-collapse: collapse; font-size: 10px; }}

            th, td {{ border: 1px solid #ddd; padding: 6px; text-align: left; }}

            th {{ background-color: #f2f2f2; font-weight: bold; }}

            .amount {{ text-align: right; }}

            .footer {{ margin-top: 20px; font-size: 10px; color: #666; }}

        </style>

    </head>

    <body>

        <div class="header">

            <div class="company-name">{business_name.upper()}</div>

            <div class="report-title">CUSTOMER LISTING</div>

            <div class="report-date">Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}</div>

        </div>



        <table>

            <thead>

                <tr>

                    <th>ID</th>

                    <th>Name</th>

                    <th>Phone</th>

                    <th>Email</th>

                    <th>Visits</th>

                    <th>Spent (MYR)</th>

                    <th>Member Since</th>

                </tr>

            </thead>

            <tbody>

    """



    total_customers = len(customers)

    total_spent = 0



    for customer in customers:

        spent = customer.get('total_spent', 0)

        total_spent += spent



        html += f"""

                <tr>

                    <td>{customer.get('customer_id', 'N/A')}</td>

                    <td>{customer['name']}</td>

                    <td>{customer.get('phone', 'N/A')}</td>

                    <td>{customer.get('email', 'N/A')}</td>

                    <td>{customer.get('total_visits', 0)}</td>

                    <td class="amount">{spent:.2f}</td>

                    <td>{str(customer.get('created_at', ''))[:10]}</td>

                </tr>

        """



    html += f"""

            </tbody>

        </table>



        <div class="footer">

            <p><strong>Total Customers: {total_customers} | Total Customer Value: MYR {total_spent:.2f}</strong></p>

            <p>This report contains {total_customers} customers. Generated by Portable POS System.</p>

        </div>

    </body>

    </html>

    """



    return html



def generate_refund_receipt_pdf(refund_transaction, original_transaction, business_name):

    """Generate actual PDF refund receipt"""

    if not PDF_AVAILABLE:

        raise ImportError("reportlab package not available")



    # Create PDF buffer

    buffer = BytesIO()



    # Create the PDF document with A4 size

    doc = SimpleDocTemplate(buffer, pagesize=A4, 

                          rightMargin=72, leftMargin=72, 

                          topMargin=72, bottomMargin=18)



    # Build the content

    story = []

    styles = getSampleStyleSheet()



    # Header style

    header_style = ParagraphStyle(

        'CustomHeader',

        parent=styles['Heading1'],

        fontSize=16,

        spaceAfter=12,

        alignment=1,  # Center alignment

        textColor=colors.red  # Red for refund

    )



    # Normal style

    normal_style = ParagraphStyle(

        'CustomNormal',

        parent=styles['Normal'],

        fontSize=11,

        spaceAfter=6,

        alignment=0  # Left alignment

    )



    # Title and business info

    story.append(Paragraph(f"<b>{business_name.upper()}</b>", header_style))

    story.append(Paragraph("REFUND RECEIPT", header_style))

    story.append(Spacer(1, 20))



    # Refund transaction details

    story.append(Paragraph(f"<b>Refund ID:</b> {str(refund_transaction['_id'])[:8]}", normal_style))

    story.append(Paragraph(f"<b>Original Transaction ID:</b> {str(original_transaction['_id'])[:8]}", normal_style))

    story.append(Paragraph(f"<b>Refund Date:</b> {refund_transaction.get('sale_date', 'Unknown')}", normal_style))

    story.append(Paragraph(f"<b>Original Sale Date:</b> {original_transaction.get('sale_date', 'Unknown')}", normal_style))

    story.append(Paragraph(f"<b>Customer:</b> {refund_transaction.get('customer_name') or 'Walk-in'}", normal_style))

    story.append(Spacer(1, 15))



    # Original transaction items

    story.append(Paragraph(f"<b>ORIGINAL TRANSACTION ITEMS:</b>", normal_style))

    if original_transaction.get('items'):

        # Prepare table data for original items

        table_data = [['Item', 'Qty', 'Unit Price (MYR)', 'Total (MYR)']]



        for item in original_transaction.get('items', []):

            table_data.append([

                item.get('offering_name', 'Unknown'),

                str(item.get('quantity', 1)),

                f"{float(item.get('unit_price', 0)):.2f}",

                f"{float(item.get('total_price', 0)):.2f}"

            ])



        # Create table

        table = Table(table_data, colWidths=[3*inch, 0.8*inch, 1.2*inch, 1.2*inch])

        table.setStyle(TableStyle([

            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),

            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),

            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),

            ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),  # Right align numbers

            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),

            ('FONTSIZE', (0, 0), (-1, 0), 12),

            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),

            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),

            ('GRID', (0, 0), (-1, -1), 1, colors.black)

        ]))



        story.append(table)

        story.append(Spacer(1, 15))



    # Refund details

    story.append(Paragraph(f"<b>REFUND DETAILS:</b>", normal_style))

    story.append(Paragraph(f"Original Amount: MYR {original_transaction['total_amount']}", normal_style))

    refund_amount = abs(float(refund_transaction['total_amount']))

    story.append(Paragraph(f"<b>Refund Amount: MYR {refund_amount:.2f}</b>", 

                          ParagraphStyle('RefundAmount', parent=styles['Normal'], fontSize=14, alignment=0, textColor=colors.red)))



    # Refund reason from notes

    if refund_transaction.get('notes'):

        story.append(Spacer(1, 10))

        # Extract refund reason from notes

        notes = refund_transaction['notes']

        if 'REFUND:' in notes:

            reason = notes.split('REFUND:')[1].split('|')[0].strip()

            story.append(Paragraph(f"<b>Refund Reason:</b> {reason}", normal_style))



    story.append(Spacer(1, 20))



    # Footer

    story.append(Paragraph("This refund has been processed and recorded in your sales system.", normal_style))

    story.append(Paragraph("Please retain this receipt for your records.", normal_style))

    story.append(Spacer(1, 10))

    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", 

                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=9, alignment=1)))



    # Build PDF

    doc.build(story)

    buffer.seek(0)



    return buffer.getvalue()



# Configure Streamlit page

st.set_page_config(

    page_title="Portable POS",  # Browser tab title

    page_icon="💰",  # Browser tab icon

    layout="wide",  # Use full width

    initial_sidebar_state="expanded"  # Sidebar open by default

)

# Inject PWA configuration
def inject_pwa_setup():
    """Inject PWA meta tags and service worker registration"""
    pwa_html = """
    <head>
        <!-- PWA Meta Tags -->
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
        <meta name="apple-mobile-web-app-title" content="Portable POS">
        <meta name="application-name" content="Portable POS">
        <meta name="theme-color" content="#D63864">

        <!-- Manifest -->
        <link rel="manifest" href="/static/manifest.json">

        <!-- iOS Icons -->
        <link rel="apple-touch-icon" sizes="180x180" href="/static/icons/icon-192x192.png">
        <link rel="apple-touch-icon" sizes="152x152" href="/static/icons/icon-152x152.png">
        <link rel="apple-touch-icon" sizes="144x144" href="/static/icons/icon-144x144.png">

        <!-- Favicon -->
        <link rel="icon" type="image/png" sizes="32x32" href="/static/icons/icon-192x192.png">
        <link rel="icon" type="image/png" sizes="16x16" href="/static/icons/icon-192x192.png">
    </head>

    <script>
        // Service Worker Registration
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/static/service-worker.js')
                    .then(function(registration) {
                        console.log('[PWA] Service Worker registered successfully:', registration.scope);
                    })
                    .catch(function(error) {
                        console.log('[PWA] Service Worker registration failed:', error);
                    });
            });
        }

        // PWA Install Prompt
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            console.log('[PWA] Install prompt available');
            e.preventDefault();
            deferredPrompt = e;
            // Show custom install button (handled in Streamlit)
            window.parent.postMessage({type: 'pwa-installable'}, '*');
        });

        // Track successful install
        window.addEventListener('appinstalled', () => {
            console.log('[PWA] App installed successfully');
            deferredPrompt = null;
        });

        // Function to trigger install (called from Streamlit button)
        window.installPWA = function() {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('[PWA] User accepted the install prompt');
                    } else {
                        console.log('[PWA] User dismissed the install prompt');
                    }
                    deferredPrompt = null;
                });
            }
        };

        // Check if app is already installed
        window.isPWAInstalled = function() {
            return window.matchMedia('(display-mode: standalone)').matches || 
                   window.navigator.standalone === true;
        };

        // Display installed status
        if (window.isPWAInstalled()) {
            console.log('[PWA] App is running in standalone mode');
        }
    </script>

    <style>
        /* PWA optimizations */
        @media (display-mode: standalone) {
            body {
                user-select: none;
                -webkit-user-select: none;
                -webkit-touch-callout: none;
            }
        }

        /* iOS safe area support */
        @supports(padding: max(0px)) {
            body {
                padding-left: max(12px, env(safe-area-inset-left));
                padding-right: max(12px, env(safe-area-inset-right));
            }
        }
    </style>
    """
    st.components.v1.html(pwa_html, height=0)

# Call PWA setup
inject_pwa_setup()


# Helper: safe_markdown
def safe_markdown(text, **kwargs):
    """Render markdown after sanitizing lone surrogate code points which can cause
    UnicodeEncodeError in Streamlit's markdown renderer. This replaces any
    characters in the surrogate range (U+D800–U+DFFF) with the Unicode
    replacement character U+FFFD.

    Use this instead of st.markdown for strings that might contain untrusted
    or dynamically-composed unicode content.
    """
    if not isinstance(text, str):
        try:
            text = str(text)
        except Exception:
            text = ""

    # Replace any lone surrogate characters with replacement char
    sanitized_chars = []
    for ch in text:
        code = ord(ch)
        if 0xD800 <= code <= 0xDFFF:
            sanitized_chars.append('\ufffd')
        else:
            sanitized_chars.append(ch)
    cleaned = ''.join(sanitized_chars)
    return st.markdown(cleaned, **kwargs)



def apply_global_theme():
    """Apply the selected theme globally across the entire app"""
    # Theme definitions (same as in Settings > Appearance)
    themes = {
        'Default': {
            'primary': '#0d6efd',
            'text': '#111827',
            'background': '#FFFFFF',
            'gradient': 'linear-gradient(180deg, #343A40 0%, #495057 50%, #6C757D 100%)'
        },
        '🌺 Dark Pink': {
            'primary': '#D63864',
            'text': '#E8E6E3',
            'background': '#1A1625',
            'gradient': 'linear-gradient(180deg, #4A1528 0%, #8B2149 50%, #D63864 100%)'
        },
        '🔥 Sunset Orange': {
            'primary': '#E67E22',
            'text': '#E8E6E3',
            'background': '#1A1410',
            'gradient': 'linear-gradient(180deg, #5C2400 0%, #A04000 50%, #E67E22 100%)'
        },
        '🌊 Ocean Teal': {
            'primary': '#16A085',
            'text': '#E8E6E3',
            'background': '#0D1A1A',
            'gradient': 'linear-gradient(180deg, #083D38 0%, #0E6655 50%, #16A085 100%)'
        },
        '🌿 Forest Green': {
            'primary': '#27AE60',
            'text': '#E8E6E3',
            'background': '#0F1A10',
            'gradient': 'linear-gradient(180deg, #145A32 0%, #1E8449 50%, #27AE60 100%)'
        },
        '🔴 Ruby Red': {
            'primary': '#E74C3C',
            'text': '#E8E6E3',
            'background': '#1A0F0D',
            'gradient': 'linear-gradient(180deg, #641E16 0%, #A93226 50%, #E74C3C 100%)'
        },
        '🌙 Midnight Blue': {
            'primary': '#3498DB',
            'text': '#E8E6E3',
            'background': '#0F1419',
            'gradient': 'linear-gradient(180deg, #1B4F72 0%, #2471A3 50%, #3498DB 100%)'
        },
        '💜 Royal Purple': {
            'primary': '#9B59B6',
            'text': '#E8E6E3',
            'background': '#18121A',
            'gradient': 'linear-gradient(180deg, #4A235A 0%, #714099 50%, #9B59B6 100%)'
        },
        '⚡ Electric Lime': {
            'primary': '#CDDC39',
            'text': '#E8E6E3',
            'background': '#1A1A10',
            'gradient': 'linear-gradient(180deg, #6C6F1A 0%, #9E9D24 50%, #CDDC39 100%)'
        }
    }

    # Apply theme CSS only for non-default themes
    active = st.session_state.get('theme', 'Default')
    if active and active in themes and active != 'Default':
        active_colors = themes[active]
        primary = active_colors['primary']
        text = active_colors['text']
        background = active_colors.get('background', '#000000')
        gradient = active_colors.get('gradient', None)

        # Use gradient if available, otherwise solid color
        sidebar_bg = f"background: {gradient} !important;" if gradient else f"background-color: {primary} !important;"

        css = f"""
        <style>
        :root {{ --theme-primary: {primary}; --theme-text: {text}; --theme-bg: {background}; }}

        /* Main app background and text */
        .stApp, .main, section[data-testid="stAppViewContainer"] {{ 
            background-color: var(--theme-bg) !important; 
            color: var(--theme-text) !important; 
        }}

        /* Sidebar with gradient or solid color */
        .stSidebar, section[data-testid="stSidebar"] {{ 
            {sidebar_bg}
        }}

        .stSidebar * {{ color: #FFFFFF !important; }}

        /* Sidebar buttons - match Logout button (secondary style) */
        .stSidebar .stButton>button {{
            background-color: rgb(240, 242, 246) !important;
            color: rgb(49, 51, 63) !important;
            border: 1px solid rgba(49, 51, 63, 0.2) !important;
            border-radius: 0.5rem !important;
            font-weight: 400 !important;
        }}

        .stSidebar .stButton>button:hover {{
            background-color: rgb(230, 232, 236) !important;
            border-color: rgba(49, 51, 63, 0.3) !important;
        }}

        /* Sidebar status boxes (Development Mode, Logged in) - compact like buttons */
        .stSidebar .element-container div[data-testid="stMarkdownContainer"] > div[data-testid="stAlert"],
        .stSidebar div[data-testid="stAlert"] {{
            background-color: var(--theme-bg) !important;
            color: #FFFFFF !important;
            border: 1px solid var(--theme-primary) !important;
            border-radius: 0.5rem !important;
            padding: 0.25rem 0.75rem !important;
            font-size: 0.875rem !important;
            line-height: 1.4 !important;
            margin: 0.25rem 0 !important;
            min-height: auto !important;
            height: auto !important;
        }}

        /* Remove nested background colors inside status boxes */
        .stSidebar div[data-testid="stAlert"] *,
        .stSidebar div[data-testid="stAlert"] > div,
        .stSidebar div[data-testid="stAlert"] div {{
            background-color: transparent !important;
            color: #FFFFFF !important;
        }}

        /* Main content headers and text */
        h1, h2, h3, h4, h5, h6, p, span, label {{ 
            color: var(--theme-text) !important; 
        }}

        /* Input fields and selectboxes */
        input, textarea, select {{ 
            background-color: rgba(255,255,255,0.05) !important; 
            color: var(--theme-text) !important; 
            border-color: var(--theme-primary) !important; 
        }}

        /* Cards and containers */
        div[data-testid="stVerticalBlock"], div[data-testid="stHorizontalBlock"] {{
            color: var(--theme-text) !important;
        }}

        /* Divider lines - match theme primary color */
        hr, div[data-testid="stHorizontalBlock"] hr {{
            border-color: var(--theme-primary) !important;
            background-color: var(--theme-primary) !important;
            opacity: 0.3;
        }}

        </style>
        """
        safe_markdown(css, unsafe_allow_html=True)



# Initialize database connection (temporary: no cache to force refresh)

# @st.cache_resource  # Temporarily commented out to force fresh connection

def get_db():

    """Initialize database connection (cached for performance)"""

    return DatabaseManager()



db = get_db()  # Get database instance



# Session state management (keeps user logged in across page reloads)

if 'logged_in' not in st.session_state:

    st.session_state.logged_in = False  # User not logged in by default

if 'user_id' not in st.session_state:

    st.session_state.user_id = None  # No user ID yet

if 'business_name' not in st.session_state:

    st.session_state.business_name = None  # No business name yet



# Development mode - persist login session

if 'dev_mode' not in st.session_state:

    st.session_state.dev_mode = False



# Theme persistence - remains active across sessions and logouts

if 'theme' not in st.session_state:

    st.session_state.theme = 'Default'



# ============================================================================

# REGISTRATION PAGE

# ============================================================================



def show_register_page():

    """Display registration form"""

    st.title("💼 Register Your Business")

    st.write("Create a new account for Portable POS")



    with st.form("register_form"):

        # Business name input

        business_name = st.text_input(

            "Business Name",  # Label

            placeholder="e.g., Nasi Lemak Siti",  # Hint text

            help="Your business name (used for login)"  # Tooltip

        )



        # PIN input (password-style)

        pin = st.text_input(

            "4-Digit PIN",  # Label

            type="password",  # Hide input

            max_chars=4,  # Only allow 4 characters

            help="Create a 4-digit PIN for login"  # Tooltip

        )



        # PIN confirmation

        pin_confirm = st.text_input(

            "Confirm PIN",  # Label

            type="password",  # Hide input

            max_chars=4,  # Only allow 4 characters

            help="Re-enter your PIN"  # Tooltip

        )



        # Business category selection (simplified from granular types)

        business_type = st.selectbox(

            "Business Category",  # Label

            ["retail", "service"],  # Simplified options

            format_func=lambda x: "🛍️ Retail (Products, Inventory, Physical Goods)" if x == "retail" else "🔧 Service (Consulting, Appointments, Professional Services)",

            help="Choose your primary business category"  # Tooltip

        )



        # Currency dropdown

        base_currency = st.selectbox(

            "Base Currency",  # Label

            ["MYR", "USD", "EUR", "SGD", "THB", "IDR"],  # Common Southeast Asian currencies

            help="Your local currency for pricing"  # Tooltip

        )



        # Optional fields (expandable section)

        with st.expander("Optional Information"):

            business_address = st.text_area(

                "Business Address",  # Label

                placeholder="e.g., Jalan Raja Laut, Kuala Lumpur",  # Hint

                help="Optional: for receipts"  # Tooltip

            )



            tax_id = st.text_input(

                "Tax ID / SSM Number",  # Label

                placeholder="e.g., C-1234567890",  # Hint

                help="Optional: for legal receipts"  # Tooltip

            )



        # Submit button

        submitted = st.form_submit_button("Register", use_container_width=True)



        if submitted:

            # Validation

            if not business_name:  # Check if business name is empty

                st.error("❌ Business name is required")

            elif not pin or len(pin) != 4 or not pin.isdigit():  # Check PIN format

                st.error("❌ PIN must be exactly 4 digits")

            elif pin != pin_confirm:  # Check if PINs match

                st.error("❌ PINs do not match")

            else:

                # Attempt to create user

                user_id = db.create_user(

                    business_name=business_name,

                    pin=pin,

                    business_type=business_type,

                    base_currency=base_currency,

                    business_address=business_address if business_address else None,

                    tax_id=tax_id if tax_id else None

                )



                if user_id:  # Registration successful

                    st.success(f"✅ Registration successful! Welcome, {business_name}!")

                    st.info("Please go to the Login page to sign in")

                else:  # Registration failed (likely duplicate business name)

                    st.error("❌ Registration failed. Business name might already exist.")



# ============================================================================

# LOGIN PAGE

# ============================================================================



def show_login_page():

    """Display login form"""

    st.title("🔐 Login")

    st.write("Sign in to your Portable POS account")



    with st.form("login_form"):

        # Business name input

        business_name = st.text_input(

            "Business Name",  # Label

            placeholder="Enter your business name",  # Hint

            help="The business name you registered with"  # Tooltip

        )



        # PIN input

        pin = st.text_input(

            "PIN",  # Label

            type="password",  # Hide input

            max_chars=4,  # Only allow 4 characters

            help="Your 4-digit PIN"  # Tooltip

        )



        # Submit button

        submitted = st.form_submit_button("Login", use_container_width=True)



        if submitted:

            # Validation

            if not business_name:  # Check if business name is empty

                st.error("❌ Business name is required")

            elif not pin or len(pin) != 4:  # Check PIN format

                st.error("❌ PIN must be 4 digits")

            else:

                # Attempt to validate PIN

                user_id = db.validate_pin(business_name, pin)



                if user_id:  # Login successful

                    # Save to session state

                    st.session_state.logged_in = True

                    st.session_state.user_id = user_id

                    st.session_state.business_name = business_name

                    st.success(f"✅ Welcome back, {business_name}!")

                    st.rerun()  # Refresh page to show dashboard

                else:  # Login failed

                    st.error("❌ Invalid business name or PIN")

    # Recovery options
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("🔍 Forgot Business Name?", use_container_width=True):
            st.session_state.page = 'forgot_business_name'
            st.rerun()
    with col2:
        if st.button("🔑 Forgot PIN?", use_container_width=True):
            st.session_state.page = 'forgot_pin'
            st.rerun()

def show_forgot_business_name():
    """Allow users to recover their business name"""
    st.title("🔍 Recover Business Name")
    st.write("Enter your recovery email or phone to find your business name")

    with st.form("forgot_business_form"):
        recovery_method = st.radio(
            "Recovery Method",
            ["Email", "Phone"],
            horizontal=True
        )

        if recovery_method == "Email":
            contact = st.text_input(
                "Recovery Email",
                placeholder="example@email.com",
                help="The email you used when setting up recovery"
            )
        else:
            contact = st.text_input(
                "Recovery Phone",
                placeholder="+60123456789",
                help="The phone number you used when setting up recovery"
            )

        submitted = st.form_submit_button("Find My Business", use_container_width=True)

        if submitted:
            if not contact:
                st.error("❌ Please enter your recovery contact")
            else:
                # Search for business
                result = db.find_business_by_recovery_contact(
                    email=contact if recovery_method == "Email" else None,
                    phone=contact if recovery_method == "Phone" else None
                )

                if result:
                    st.success(f"✅ Found your business!")
                    st.info(f"**Business Name:** {result['business_name']}")
                    st.info(f"**Business Type:** {result['business_type']}")
                    st.balloons()

                    if st.button("← Back to Login", use_container_width=True):
                        st.session_state.page = 'login'
                        st.rerun()
                else:
                    st.error("❌ No business found with this recovery contact")
                    st.info("💡 Make sure you've set up recovery contact in your account settings")

    st.markdown("---")
    if st.button("← Back to Login", use_container_width=True):
        st.session_state.page = 'login'
        st.rerun()

def show_forgot_pin():
    """Allow users to reset their PIN"""
    st.title("🔑 Reset PIN")
    st.write("Reset your PIN using your business name and recovery contact")

    with st.form("forgot_pin_form"):
        business_name = st.text_input(
            "Business Name",
            placeholder="Enter your business name",
            help="Your registered business name"
        )

        recovery_method = st.radio(
            "Recovery Method",
            ["Email", "Phone"],
            horizontal=True
        )

        if recovery_method == "Email":
            contact = st.text_input(
                "Recovery Email",
                placeholder="example@email.com",
                help="The email you used when setting up recovery"
            )
        else:
            contact = st.text_input(
                "Recovery Phone",
                placeholder="+60123456789",
                help="The phone number you used when setting up recovery"
            )

        new_pin = st.text_input(
            "New PIN",
            type="password",
            max_chars=4,
            help="Enter your new 4-digit PIN"
        )

        confirm_pin = st.text_input(
            "Confirm New PIN",
            type="password",
            max_chars=4,
            help="Re-enter your new PIN"
        )

        submitted = st.form_submit_button("Reset PIN", use_container_width=True)

        if submitted:
            if not business_name or not contact:
                st.error("❌ All fields are required")
            elif len(new_pin) != 4 or not new_pin.isdigit():
                st.error("❌ PIN must be 4 digits")
            elif new_pin != confirm_pin:
                st.error("❌ PINs don't match")
            else:
                # Attempt PIN reset
                success = db.verify_recovery_and_reset_pin(business_name, contact, new_pin)

                if success:
                    st.success("✅ PIN reset successfully!")
                    st.info("You can now login with your new PIN")
                    st.balloons()

                    if st.button("← Go to Login", use_container_width=True):
                        st.session_state.page = 'login'
                        st.rerun()
                else:
                    st.error("❌ PIN reset failed")
                    st.info("Please verify your business name and recovery contact match")

    st.markdown("---")
    if st.button("← Back to Login", use_container_width=True):
        st.session_state.page = 'login'
        st.rerun()

# ============================================================================

# DASHBOARD (LOGGED IN VIEW)

# ============================================================================



def show_dashboard():

    """Display dashboard for logged-in users"""

    st.title(f"💼 {st.session_state.business_name}")

    st.write(f"User ID: `{st.session_state.user_id}`")



    # Top row with logout, refresh and dev mode

    col_logout, col_refresh, col_dev = st.columns([1, 1, 2])



    with col_logout:

        if st.button("🚪 Logout", type="secondary", use_container_width=True):

            st.session_state.logged_in = False

            st.session_state.user_id = None

            st.session_state.business_name = None

            st.session_state.dev_mode = False

            st.rerun()



    with col_refresh:

        if st.button("🔄 Refresh", type="primary", use_container_width=True, help="Refresh app without losing login"):

            st.rerun()



    with col_dev:

        dev_mode = st.checkbox(

            "🔧 Development Mode (Stay Logged In)", 

            value=st.session_state.dev_mode,

            help="Keeps you logged in when making code changes"

        )

        if dev_mode != st.session_state.dev_mode:

            st.session_state.dev_mode = dev_mode



    st.divider()



    # Tabs for different sections

    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "📊 Overview", 
        "🍽️ Menu", 
        "💼 Sales & Quotes", 
        "📋 Quotations Listing",
        "📈 Sales Listing", 
        "👥 Customer Listing", 
        "⚙️ Settings"
    ])



    with tab1:

        st.header("📊 Overview")
        st.caption("Comprehensive business analytics and insights")

        # Create sub-tabs for Overview
        visual_tab, metrics_tab, ai_tab = st.tabs(["📈 Visual Dashboard", "📊 Metrics", "🤖 AI Analytics"])

        with visual_tab:
            # Enhanced Business Dashboard
            # Removed redundant Visual Dashboard subheader for cleaner UI

            try:
                # Get business data
                all_transactions = db.get_user_transactions(st.session_state.user_id, limit=1000)
                menu_items = db.get_user_menu_items(st.session_state.user_id)

                # Force sync customers from transactions to ensure data is up to date
                new_customers_count = db.sync_customers_from_transactions(st.session_state.user_id)
                all_customers = db.search_customers(st.session_state.user_id, "")

                # Debug info (can be removed later)
                if new_customers_count > 0:
                    st.success(f"🔄 Synced {new_customers_count} new customers from transactions")

                # Date Range Selector - Controls all analysis below
                if all_transactions:
                    from collections import Counter, defaultdict
                    from datetime import datetime, timedelta

                    # Date Range Selector
                    date_option = st.selectbox(
                        "📅 Select time period for analysis:",
                        ["Last 7 Days", "Last 14 Days", "Last 30 Days", "Last 60 Days", "Last 90 Days", "Last Year", "Last 2 Years", "Last 3 Years", "Custom Range"],
                        index=2,  # Default to Last 30 Days
                        help="Choose the time period for your business analytics and year-over-year comparison"
                    )

                    # Calculate time periods based on selection
                    if date_option == "Last 7 Days":
                        days_back = 7
                    elif date_option == "Last 14 Days":
                        days_back = 14
                    elif date_option == "Last 30 Days":
                        days_back = 30
                    elif date_option == "Last 60 Days":
                        days_back = 60
                    elif date_option == "Last 90 Days":
                        days_back = 90
                    elif date_option == "Last Year":
                        days_back = 365
                    elif date_option == "Last 2 Years":
                        days_back = 365 * 2
                    elif date_option == "Last 3 Years":
                        days_back = 365 * 3
                    else:  # Custom Range
                        col_start, col_end = st.columns(2)
                        with col_start:
                            start_date = st.date_input("Start Date", value=datetime.now() - timedelta(days=30))
                        with col_end:
                            end_date = st.date_input("End Date", value=datetime.now())

                        # Convert to days back for compatibility
                        days_back = (datetime.now().date() - start_date).days

                    # Filter transactions by selected period
                    cutoff_date = (datetime.now() - timedelta(days=days_back)).strftime("%Y-%m-%d")
                    filtered_transactions = [t for t in all_transactions if t.get('sale_date', '0000-00-00') >= cutoff_date]

                else:
                    filtered_transactions = all_transactions

                # Calculate ALL TIME metrics (to match Sales Listing tab)
                alltime_total = len(all_transactions)
                alltime_revenue = sum(float(t.get('total_amount', 0)) for t in all_transactions)

                # Today's data from ALL transactions

                today = datetime.now().strftime("%Y-%m-%d")
                today_transactions = [t for t in all_transactions if t.get('sale_date', '') == today]
                today_revenue = sum(float(t.get('total_amount', 0)) for t in today_transactions)

                # This week's data from ALL transactions
                week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
                week_transactions = [t for t in all_transactions if t.get('sale_date', '0000-00-00') >= week_ago]
                week_revenue = sum(float(t.get('total_amount', 0)) for t in week_transactions)

                # This month's data from ALL transactions (current calendar month)
                current_month_start = datetime.now().replace(day=1).strftime("%Y-%m-%d")
                month_transactions = [t for t in all_transactions if t.get('sale_date', '0000-00-00') >= current_month_start]
                month_revenue = sum(float(t.get('total_amount', 0)) for t in month_transactions)

                # Calculate filtered period metrics for visual analytics
                total_transactions = len(filtered_transactions)
                total_revenue = sum(float(t.get('total_amount', 0)) for t in filtered_transactions)

                # Enhanced Visual Analytics Dashboard 
                if filtered_transactions:
                    st.write("### 📊 Visual Analytics Dashboard")
                    st.caption(f"Interactive charts and graphs for {date_option}")

                    # ============================================================================
                    # REVENUE & SALES CHARTS
                    # ============================================================================

                    # Prepare data for charts
                    from collections import defaultdict, Counter
                    import pandas as pd

                    # Group sales by date
                    daily_sales = defaultdict(lambda: {'count': 0, 'revenue': 0.0})

                    for transaction in filtered_transactions:
                        sale_date = transaction.get('sale_date', 'Unknown')
                        amount = float(transaction.get('total_amount', 0))

                        if sale_date != 'Unknown':
                            daily_sales[sale_date]['count'] += 1
                            daily_sales[sale_date]['revenue'] += amount

                    # Row 1: Revenue and Transaction Trends
                    if daily_sales:
                        st.write("#### 📈 Sales Performance Over Time")

                        dates = sorted(daily_sales.keys())
                        sales_counts = [daily_sales[date]['count'] for date in dates]
                        revenues = [daily_sales[date]['revenue'] for date in dates]

                        # Create combined chart data
                        trend_df = pd.DataFrame({
                            'Date': dates,
                            'Transactions': sales_counts,
                            'Revenue (MYR)': revenues
                        })
                        trend_df.set_index('Date', inplace=True)

                        chart_col1, chart_col2 = st.columns(2)

                        with chart_col1:
                            st.write("**Daily Transaction Volume**")
                            st.line_chart(trend_df[['Transactions']], use_container_width=True)

                        with chart_col2:
                            st.write("**Daily Revenue Trend**")
                            st.area_chart(trend_df[['Revenue (MYR)']], use_container_width=True)

                    st.markdown("---")

                    # ============================================================================
                    # PRODUCT PERFORMANCE CHARTS
                    # ============================================================================

                    st.write("#### 🏆 Product Performance Analysis")

                    # Analyze all items sold
                    item_sales = defaultdict(lambda: {'quantity': 0, 'revenue': 0.0, 'transactions': 0})

                    for transaction in filtered_transactions:
                        for item in transaction.get('items', []):
                            item_name = item.get('offering_name', 'Unknown')
                            quantity = int(item.get('quantity', 1))
                            total_price = float(item.get('total_price', 0))

                            item_sales[item_name]['quantity'] += quantity
                            item_sales[item_name]['revenue'] += total_price
                            item_sales[item_name]['transactions'] += 1

                    if item_sales:
                        # Top products by revenue and quantity
                        top_by_revenue = sorted(item_sales.items(), key=lambda x: x[1]['revenue'], reverse=True)[:8]
                        top_by_quantity = sorted(item_sales.items(), key=lambda x: x[1]['quantity'], reverse=True)[:8]

                    chart_col3, chart_col4 = st.columns(2)

                    with chart_col3:
                        st.write("**Top Products by Revenue**")
                        if top_by_revenue:
                            revenue_df = pd.DataFrame([
                                {'Product': item[0][:20], 'Revenue': item[1]['revenue']} 
                                for item in top_by_revenue
                            ])
                            st.bar_chart(revenue_df.set_index('Product'), use_container_width=True)

                    with chart_col4:
                        st.write("**Top Products by Quantity Sold**")
                        if top_by_quantity:
                            quantity_df = pd.DataFrame([
                                {'Product': item[0][:20], 'Quantity': item[1]['quantity']} 
                                for item in top_by_quantity
                            ])
                            st.bar_chart(quantity_df.set_index('Product'), use_container_width=True)

                st.markdown("---")

                # ============================================================================
                # CUSTOMER INSIGHTS CHARTS
                # ============================================================================

                st.write("#### 👥 Customer Analytics")

                # Customer analysis
                customer_analysis = defaultdict(lambda: {'transactions': 0, 'total_spent': 0.0})
                walk_in_count = 0
                walk_in_revenue = 0.0

                for transaction in filtered_transactions:
                    customer_name = transaction.get('customer_name')
                    amount = float(transaction.get('total_amount', 0))

                    if customer_name:
                        customer_analysis[customer_name]['transactions'] += 1
                        customer_analysis[customer_name]['total_spent'] += amount
                    else:
                        walk_in_count += 1
                        walk_in_revenue += amount

                chart_col5, chart_col6 = st.columns(2)

                with chart_col5:
                    st.write("**Customer vs Walk-in Revenue**")
                    # Customer revenue comparison
                    customer_revenue = sum(data['total_spent'] for data in customer_analysis.values())
                    if customer_revenue > 0 or walk_in_revenue > 0:
                        customer_pie_df = pd.DataFrame({
                            'Type': ['Registered Customers', 'Walk-in Sales'],
                            'Revenue': [customer_revenue, walk_in_revenue]
                        })
                        st.bar_chart(customer_pie_df.set_index('Type'), use_container_width=True)

                with chart_col6:
                    st.write("**Top Customer Spending**")
                    if customer_analysis:
                        top_customers = sorted(customer_analysis.items(), key=lambda x: x[1]['total_spent'], reverse=True)[:6]
                        customer_df = pd.DataFrame([
                            {'Customer': item[0][:15], 'Spent': item[1]['total_spent']} 
                            for item in top_customers
                        ])
                        st.bar_chart(customer_df.set_index('Customer'), use_container_width=True)

                st.markdown("---")

                # ============================================================================
                # BUSINESS METRICS VISUALIZATION
                # ============================================================================

                st.write("#### 📊 Category Performance & Revenue Distribution")

                chart_col7, chart_col8 = st.columns(2)

                with chart_col7:
                    st.write("**Revenue by Category**")
                    # Category revenue analysis
                    category_revenue = defaultdict(float)
                    for transaction in filtered_transactions:
                        for item in transaction.get('items', []):
                            item_name = item.get('offering_name', 'Unknown')
                            # Find category for this item
                            item_category = 'Other'
                            for menu_item in menu_items:
                                if menu_item.get('name') == item_name:
                                    item_category = menu_item.get('category', 'Other')
                                    break

                            qty = int(item.get('quantity', 1))
                            price = float(item.get('unit_price', 0))
                            category_revenue[item_category] += qty * price

                    if category_revenue:
                        cat_df = pd.DataFrame([
                            {'Category': cat[:15], 'Revenue': rev} 
                            for cat, rev in sorted(category_revenue.items(), key=lambda x: x[1], reverse=True)[:8]
                        ])
                        st.bar_chart(cat_df.set_index('Category'), use_container_width=True)

                with chart_col8:
                    st.write("**Transaction Value Distribution**")
                    if filtered_transactions:
                        # Transaction value distribution
                        amounts = [float(t.get('total_amount', 0)) for t in filtered_transactions]

                        # Create bins for distribution
                        if amounts:
                            bins = ['0-50', '51-100', '101-200', '201-500', '500+']
                            bin_counts = [0, 0, 0, 0, 0]

                            for amount in amounts:
                                if amount <= 50:
                                    bin_counts[0] += 1
                                elif amount <= 100:
                                    bin_counts[1] += 1
                                elif amount <= 200:
                                    bin_counts[2] += 1
                                elif amount <= 500:
                                    bin_counts[3] += 1
                                else:
                                    bin_counts[4] += 1

                            dist_df = pd.DataFrame({
                                'Range (MYR)': bins,
                                'Transactions': bin_counts
                            })
                            st.bar_chart(dist_df.set_index('Range (MYR)'), use_container_width=True)

                st.markdown("---")

                # ============================================================================
                # BUSINESS INTELLIGENCE INSIGHTS
                # ============================================================================

                st.write("#### 🧠 Business Intelligence Insights")

                insights_col1, insights_col2, insights_col3 = st.columns(3)

                with insights_col1:
                    st.write("**📈 Performance Metrics**")

                    # Calculate insights
                    avg_transaction_value = total_revenue / total_transactions if total_transactions > 0 else 0
                    st.metric("Average Transaction", f"MYR {avg_transaction_value:.2f}")

                    if item_sales:
                        total_items_sold = sum(data['quantity'] for data in item_sales.values())
                        st.metric("Items per Transaction", f"{total_items_sold/total_transactions:.1f}")

                    unique_customers = len(customer_analysis)
                    st.metric("Unique Customers", unique_customers)

                with insights_col2:
                    st.write("**🎯 Key Insights**")

                    # Best performing day
                    if len(daily_sales) > 1:
                        best_day = max(daily_sales.items(), key=lambda x: x[1]['revenue'])
                        st.success(f"🎯 Best Day: {best_day[0]} (MYR {best_day[1]['revenue']:.2f})")

                    # Customer retention
                    if len(customer_analysis) > 0:
                        repeat_customers = sum(1 for data in customer_analysis.values() if data['transactions'] > 1)
                        repeat_rate = (repeat_customers / len(customer_analysis)) * 100
                        st.info(f"🔄 Repeat Rate: {repeat_rate:.1f}%")

                    # Top product
                    if item_sales:
                        top_product = max(item_sales.items(), key=lambda x: x[1]['revenue'])
                        st.warning(f"🏆 Top Product: {top_product[0][:20]}")

                with insights_col3:
                    st.write("**📊 Quick Stats**")

                    # Basket size analysis
                    if filtered_transactions:
                        basket_sizes = [len(t.get('items', [])) for t in filtered_transactions]
                        avg_basket_size = sum(basket_sizes) / len(basket_sizes)
                        max_basket = max(basket_sizes)
                        st.metric("Avg Basket Size", f"{avg_basket_size:.1f} items")
                        st.metric("Largest Basket", f"{max_basket} items")

                        single_item_orders = len([t for t in filtered_transactions if len(t.get('items', [])) == 1])
                        single_item_pct = (single_item_orders / len(filtered_transactions) * 100)
                        st.metric("Single Item Orders", f"{single_item_pct:.1f}%")

                # Show message if no transactions
                if not all_transactions:
                    st.info("📊 No transactions yet. Start making sales to see your business overview!")

            except Exception as e:
                st.error(f"Error loading overview: {e}")
                st.info("💡 Try refreshing the page or check your database connection.")

        with metrics_tab:
            st.subheader("📊 Key Business Metrics")
            
            # Fetch transaction and customer data
            all_transactions = db.get_user_transactions(st.session_state.user_id, limit=5000)
            all_customers = db.search_customers(st.session_state.user_id, "")
            
            if not all_transactions:
                st.info("📊 No sales data available yet. Start making sales to see metrics!")
            else:
                from datetime import datetime, timedelta
                import statistics
                
                # Calculate date ranges
                today = datetime.now().date()
                week_ago = today - timedelta(days=7)
                month_ago = today - timedelta(days=30)
                
                # Parse transaction dates
                today_str = today.strftime("%Y-%m-%d")
                
                # Categorize transactions by date
                today_trans = [t for t in all_transactions if t.get('sale_date') == today_str]
                week_trans = [t for t in all_transactions if datetime.strptime(t.get('sale_date', '1900-01-01'), "%Y-%m-%d").date() >= week_ago]
                month_trans = [t for t in all_transactions if datetime.strptime(t.get('sale_date', '1900-01-01'), "%Y-%m-%d").date() >= month_ago]
                
                # Calculate revenue metrics
                today_revenue = sum(float(t['total_amount']) for t in today_trans)
                week_revenue = sum(float(t['total_amount']) for t in week_trans)
                month_revenue = sum(float(t['total_amount']) for t in month_trans)
                total_revenue = sum(float(t['total_amount']) for t in all_transactions)
                
                # Calculate averages
                today_avg = today_revenue / len(today_trans) if today_trans else 0
                week_avg = week_revenue / len(week_trans) if week_trans else 0
                month_avg = month_revenue / len(month_trans) if month_trans else 0
                overall_avg = total_revenue / len(all_transactions) if all_transactions else 0
                
                # Revenue growth calculation
                if len(month_trans) > 0:
                    week_data = [float(t['total_amount']) for t in week_trans]
                    month_data = [float(t['total_amount']) for t in month_trans]
                    prev_week_data = [float(t['total_amount']) for t in month_trans if t not in week_trans]
                    
                    week_total = sum(week_data)
                    prev_week_total = sum(prev_week_data)
                    growth = ((week_total - prev_week_total) / prev_week_total * 100) if prev_week_total > 0 else 0
                else:
                    growth = 0
                
                # Top performing items
                item_sales = {}
                for trans in all_transactions:
                    for item in trans.get('items', []):
                        offering_name = item.get('offering_name', 'Unknown')
                        quantity = item.get('quantity', 1)
                        item_sales[offering_name] = item_sales.get(offering_name, 0) + quantity
                
                top_items = sorted(item_sales.items(), key=lambda x: x[1], reverse=True)[:5]
                
                # Transaction frequency
                transaction_dates = [t.get('sale_date') for t in all_transactions if t.get('sale_date')]
                unique_dates = len(set(transaction_dates))
                days_active = (max([datetime.strptime(d, "%Y-%m-%d") for d in transaction_dates]).date() - 
                             min([datetime.strptime(d, "%Y-%m-%d") for d in transaction_dates]).date()).days + 1 if transaction_dates else 1
                
                # Customer metrics
                customer_count = len(all_customers)
                returning_customers = len([c for c in all_customers if c.get('total_visits', 0) > 1])
                returning_rate = (returning_customers / customer_count * 100) if customer_count > 0 else 0
                
                # ============================================================================
                # TOP LEVEL METRICS
                # ============================================================================
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "Total Revenue",
                        f"MYR {total_revenue:,.2f}",
                        help="All-time revenue from all transactions"
                    )
                
                with col2:
                    st.metric(
                        "Total Transactions",
                        len(all_transactions),
                        help="All-time transaction count"
                    )
                
                with col3:
                    st.metric(
                        "Average Order Value",
                        f"MYR {overall_avg:.2f}",
                        delta=f"{growth:+.1f}%" if growth != 0 else None,
                        help="Average revenue per transaction"
                    )
                
                with col4:
                    st.metric(
                        "Total Customers",
                        customer_count,
                        help="Total unique customers"
                    )
                
                st.divider()
                
                # ============================================================================
                # TIME PERIOD COMPARISON
                # ============================================================================
                
                st.subheader("📅 Sales by Time Period")
                
                period_col1, period_col2, period_col3 = st.columns(3)
                
                with period_col1:
                    st.metric(
                        "Today",
                        f"MYR {today_revenue:.2f}",
                        f"{len(today_trans)} sales",
                        help="Revenue and transaction count for today"
                    )
                    st.caption(f"Avg: MYR {today_avg:.2f}")
                
                with period_col2:
                    st.metric(
                        "Last 7 Days",
                        f"MYR {week_revenue:.2f}",
                        f"{len(week_trans)} sales",
                        help="Revenue and transaction count for the last 7 days"
                    )
                    st.caption(f"Avg: MYR {week_avg:.2f}")
                
                with period_col3:
                    st.metric(
                        "Last 30 Days",
                        f"MYR {month_revenue:.2f}",
                        f"{len(month_trans)} sales",
                        help="Revenue and transaction count for the last 30 days"
                    )
                    st.caption(f"Avg: MYR {month_avg:.2f}")
                
                st.divider()
                
                # ============================================================================
                # CUSTOMER ANALYTICS
                # ============================================================================
                
                st.subheader("👥 Customer Analytics")
                
                cust_col1, cust_col2, cust_col3 = st.columns(3)
                
                with cust_col1:
                    st.metric(
                        "Unique Customers",
                        customer_count,
                        help="Total number of unique customers"
                    )
                
                with cust_col2:
                    st.metric(
                        "Returning Customers",
                        f"{returning_customers} ({returning_rate:.1f}%)",
                        help="Customers who made more than one purchase"
                    )
                
                with cust_col3:
                    avg_customer_value = total_revenue / customer_count if customer_count > 0 else 0
                    st.metric(
                        "Customer Lifetime Value",
                        f"MYR {avg_customer_value:.2f}",
                        help="Average total spent per customer"
                    )
                
                st.divider()
                
                # ============================================================================
                # TOP PERFORMING ITEMS
                # ============================================================================
                
                st.subheader("🏆 Top Performing Products")
                
                if top_items:
                    # Create a simple table
                    top_items_data = []
                    for rank, (item_name, quantity) in enumerate(top_items, 1):
                        top_items_data.append({
                            "Rank": rank,
                            "Product": item_name,
                            "Units Sold": quantity
                        })
                    
                    st.dataframe(
                        top_items_data,
                        use_container_width=True,
                        hide_index=True,
                        column_config={
                            "Rank": st.column_config.NumberColumn(width=50),
                            "Product": st.column_config.TextColumn(width=250),
                            "Units Sold": st.column_config.NumberColumn(width=100)
                        }
                    )
                else:
                    st.info("No product data available")
                
                st.divider()
                
                # ============================================================================
                # TRANSACTION FREQUENCY
                # ============================================================================
                
                st.subheader("📈 Transaction Frequency")
                
                freq_col1, freq_col2, freq_col3 = st.columns(3)
                
                with freq_col1:
                    st.metric(
                        "Active Sales Days",
                        unique_dates,
                        help="Number of unique dates with sales"
                    )
                
                with freq_col2:
                    avg_daily = len(all_transactions) / unique_dates if unique_dates > 0 else 0
                    st.metric(
                        "Avg Sales per Day",
                        f"{avg_daily:.1f}",
                        help="Average number of transactions per active day"
                    )
                
                with freq_col3:
                    avg_revenue_per_day = total_revenue / unique_dates if unique_dates > 0 else 0
                    st.metric(
                        "Avg Revenue per Day",
                        f"MYR {avg_revenue_per_day:.2f}",
                        help="Average revenue per active day"
                    )
                
                st.divider()
                
                # ============================================================================
                # ADVANCED ANALYTICS
                # ============================================================================
                
                st.subheader("📊 Advanced Analytics")
                
                adv_col1, adv_col2 = st.columns(2)
                
                with adv_col1:
                    # Revenue distribution
                    st.write("**Revenue Distribution by Time Period**")
                    
                    distribution_data = {
                        "Today": today_revenue,
                        "Last 7 Days": week_revenue,
                        "Last 30 Days": month_revenue,
                        "All Time": total_revenue
                    }
                    
                    # Create simple bar representation
                    for period, amount in distribution_data.items():
                        percentage = (amount / total_revenue * 100) if total_revenue > 0 else 0
                        st.write(f"{period}: **MYR {amount:,.2f}** ({percentage:.1f}%)")
                
                with adv_col2:
                    # Sales consistency
                    st.write("**Sales Consistency**")
                    
                    if len(month_trans) > 0:
                        daily_revenues = {}
                        for trans in month_trans:
                            date = trans.get('sale_date', '')
                            if date:
                                daily_revenues[date] = daily_revenues.get(date, 0) + float(trans['total_amount'])
                        
                        if daily_revenues:
                            daily_values = list(daily_revenues.values())
                            
                            st.write(f"**Last 30 Days Stats:**")
                            st.write(f"- Highest Day: MYR {max(daily_values):,.2f}")
                            st.write(f"- Lowest Day: MYR {min(daily_values):,.2f}")
                            st.write(f"- Average Day: MYR {statistics.mean(daily_values):.2f}")
                            
                            if len(daily_values) > 1:
                                st.write(f"- Std Dev: MYR {statistics.stdev(daily_values):.2f}")
                    else:
                        st.info("Not enough data for consistency analysis")
                
                st.divider()
                
                # ============================================================================
                # INSIGHTS
                # ============================================================================
                
                st.subheader("💡 Key Insights")
                
                insights = []
                
                if growth > 10:
                    insights.append(f"🚀 **Strong Growth**: Your weekly revenue has grown by {growth:.1f}% - excellent momentum!")
                elif growth > 0:
                    insights.append(f"📈 **Positive Growth**: Your weekly revenue increased by {growth:.1f}%")
                elif growth < -10:
                    insights.append(f"⚠️ **Declining Sales**: Weekly revenue decreased by {abs(growth):.1f}% - consider review strategies")
                
                if returning_rate > 50:
                    insights.append(f"👑 **High Loyalty**: {returning_rate:.1f}% of customers return - excellent customer retention!")
                elif returning_rate > 25:
                    insights.append(f"👥 **Good Retention**: {returning_rate:.1f}% customer return rate indicates decent loyalty")
                
                if len(top_items) > 0:
                    top_item = top_items[0]
                    insights.append(f"⭐ **Best Seller**: '{top_item[0]}' is your top product with {top_item[1]} units sold")
                
                if len(all_transactions) > 100:
                    insights.append(f"📊 **Data Rich**: You have {len(all_transactions)} transactions - ready for deeper analysis!")
                
                if today_revenue > 0:
                    if today_revenue > week_avg:
                        insights.append(f"💰 **Strong Today**: Today's revenue (MYR {today_revenue:.2f}) exceeds weekly average!")
                    else:
                        insights.append(f"📅 **On Track**: Today's revenue is trending at MYR {today_revenue:.2f}")
                
                if insights:
                    for insight in insights:
                        st.info(insight)
                else:
                    st.info("Keep making sales to generate insights!")

        with ai_tab:
            st.subheader("🤖 AI-Powered Analytics & Intelligence")
            
            if not AI_AVAILABLE:
                st.warning(f"⚠️ AI Analytics requires additional dependencies: {AI_ERROR}")
                st.info("Install required packages with: `pip install langchain-google-genai google-generativeai`")
                st.markdown("**Features will be available once dependencies are installed.**")
            else:
                st.caption("🚀 Powered by Google Gemini 1.5 Flash - Intelligent predictions, forecasts, and actionable insights")
                
                # Feature Overview Metrics
                col1, col2, col3, col4, col5 = st.columns(5)
                with col1:
                    st.metric("📈 Forecasts", "3 Models")
                with col2:
                    st.metric("👥 Segments", "5+ Types")
                with col3:
                    st.metric("🍽️ Menu AI", "Full Analysis")
                with col4:
                    st.metric("📢 Marketing", "4+ Insights")
                with col5:
                    st.metric("⚠️ Alerts", "Real-time")
                
                st.divider()
                
                # Create tabs for different analytics features
                forecast_tab, customer_tab, menu_tab, marketing_tab, anomaly_tab = st.tabs([
                    "📈 Sales Forecast",
                    "👥 Customer Insights", 
                    "🍽️ Menu Analysis",
                    "📢 Marketing",
                    "⚠️ Anomalies"
                ])
                
                with forecast_tab:
                    st.markdown("### Predictive Sales Forecasting")
                    st.markdown("""
**Generate AI-powered predictions:**
- 7-day, 14-day, 30-day revenue forecasts
- Demand predictions by product category
- Seasonal trend analysis
- Peak period identification
""")
                    
                    col_btn, col_info = st.columns([1, 2])
                    with col_btn:
                        if st.button("🔮 Generate Forecast", key="forecast_btn", use_container_width=True):
                            with st.spinner("Analyzing your sales patterns..."):
                                try:
                                    forecast = generate_sales_forecast(st.session_state.user_id)
                                    st.session_state.forecast_result = forecast
                                    st.success("Forecast complete!")
                                    st.markdown(forecast)
                                    st.markdown("---")
                                    st.download_button(
                                        "📥 Download Forecast",
                                        data=forecast,
                                        file_name=f"forecast_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain"
                                    )
                                except Exception as e:
                                    st.error(f"Error: {str(e)}")
                    
                    with col_info:
                        st.info("""**Use forecasts to:**
- Plan inventory ahead of time
- Prepare for peak demand periods
- Schedule staff efficiently
- Budget accurately for next month""")
                
                with customer_tab:
                    st.markdown("### Customer Behavior Intelligence")
                    st.markdown("""
**Understand your customer base:**
- High-value vs regular customers
- Churn risk prediction
- Purchase pattern analysis
- Loyalty segmentation
- Engagement recommendations
""")
                    
                    col_btn, col_info = st.columns([1, 2])
                    with col_btn:
                        if st.button("🔍 Analyze Customers", key="customer_btn", use_container_width=True):
                            with st.spinner("Analyzing customer patterns..."):
                                try:
                                    insights = generate_customer_insights(st.session_state.user_id)
                                    st.session_state.customer_result = insights
                                    st.success("Analysis complete!")
                                    st.markdown(insights)
                                    st.markdown("---")
                                    st.download_button(
                                        "📥 Download Report",
                                        data=insights,
                                        file_name=f"customers_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain"
                                    )
                                except Exception as e:
                                    st.error(f"Error: {str(e)}")
                    
                    with col_info:
                        st.info("""**Act on insights to:**
- Retain at-risk customers
- Target high-value offers
- Create loyalty programs
- Personalize marketing""")
                
                with menu_tab:
                    st.markdown("### Smart Menu Optimization")
                    st.markdown("""
**Optimize for profitability:**
- Top performing items
- Underperforming products
- Pricing optimization
- Cross-selling opportunities
- New item recommendations
""")
                    
                    col_btn, col_info = st.columns([1, 2])
                    with col_btn:
                        if st.button("✏️ Optimize Menu", key="menu_btn", use_container_width=True):
                            with st.spinner("Analyzing menu performance..."):
                                try:
                                    recommendations = generate_menu_optimization(st.session_state.user_id)
                                    st.session_state.menu_result = recommendations
                                    st.success("Optimization complete!")
                                    st.markdown(recommendations)
                                    st.markdown("---")
                                    st.download_button(
                                        "📥 Download Recommendations",
                                        data=recommendations,
                                        file_name=f"menu_optimization_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain"
                                    )
                                except Exception as e:
                                    st.error(f"Error: {str(e)}")
                    
                    with col_info:
                        st.info("""**Apply recommendations to:**
- Increase profit margins
- Remove slow movers
- Bundle complementary items
- Test new products""")
                
                with marketing_tab:
                    st.markdown("### Marketing Strategy Intelligence")
                    st.markdown("""
**Boost your marketing ROI:**
- Targeted campaign ideas
- Promotion timing suggestions
- Customer engagement tactics
- Referral program strategies
- Seasonal promotion ideas
""")
                    
                    col_btn, col_info = st.columns([1, 2])
                    with col_btn:
                        if st.button("📊 Get Marketing Insights", key="marketing_btn", use_container_width=True):
                            with st.spinner("Generating marketing strategies..."):
                                try:
                                    insights = generate_marketing_insights(st.session_state.user_id)
                                    st.session_state.marketing_result = insights
                                    st.success("Strategy generated!")
                                    st.markdown(insights)
                                    st.markdown("---")
                                    st.download_button(
                                        "📥 Download Strategy",
                                        data=insights,
                                        file_name=f"marketing_strategy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain"
                                    )
                                except Exception as e:
                                    st.error(f"Error: {str(e)}")
                    
                    with col_info:
                        st.info("""**Execute strategies to:**
- Drive more traffic
- Increase repeat purchases
- Improve customer lifetime value
- Launch targeted campaigns""")
                
                with anomaly_tab:
                    st.markdown("### Anomaly Detection & Alerts")
                    st.markdown("""
**Detect unusual patterns:**
- Abnormal sales spikes/drops
- Unusual customer behavior
- Pricing anomalies
- Inventory issues
- Revenue concerns
""")
                    
                    col_btn, col_info = st.columns([1, 2])
                    with col_btn:
                        if st.button("🔔 Scan for Anomalies", key="anomaly_btn", use_container_width=True):
                            with st.spinner("Scanning for anomalies..."):
                                try:
                                    anomalies = detect_anomalies(st.session_state.user_id)
                                    st.session_state.anomaly_result = anomalies
                                    
                                    if "no anomalies" in anomalies.lower() or "none found" in anomalies.lower():
                                        st.success("All clear! No anomalies detected.")
                                    else:
                                        st.warning("Anomalies detected - review below:")
                                    
                                    st.markdown(anomalies)
                                    st.markdown("---")
                                    st.download_button(
                                        "📥 Download Report",
                                        data=anomalies,
                                        file_name=f"anomalies_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain"
                                    )
                                except Exception as e:
                                    st.error(f"Error: {str(e)}")
                    
                    with col_info:
                        st.info("""**Take action on:**
- Unusual sales patterns
- Customer churn signals
- Revenue threats
- Opportunity spikes""")
                
                st.divider()
                st.markdown("### About AI Intelligence")
                st.markdown("""
This AI system analyzes your POS data to provide:

**🔮 Predictive Power**
- Machine learning forecasts with high accuracy
- Pattern recognition from your historical data
- Early warning system for issues

**💡 Smart Insights**
- Actionable recommendations
- Business growth strategies
- Risk mitigation tactics

**🚀 Competitive Advantage**
- Stay ahead of market trends
- Optimize operations automatically
- Make data-driven decisions
""")

    with tab2:

        st.header("🍽️ Menu")
        st.caption("Manage your products and services")

        # Initialize category order in session state if not exists

        if 'category_order' not in st.session_state:

            st.session_state.category_order = None



        # Get current categories for all category operations

        default_categories = MENU_CATEGORIES.copy()

        user_custom_categories = db.get_user_categories(st.session_state.user_id)

        all_categories = list(set(default_categories + user_custom_categories))



        # Apply custom ordering if exists, otherwise sort alphabetically

        if st.session_state.category_order:

            # Use saved order, add any new categories at the end

            ordered_categories = [cat for cat in st.session_state.category_order if cat in all_categories]

            new_categories = [cat for cat in all_categories if cat not in ordered_categories]

            all_categories = ordered_categories + sorted(new_categories)

        else:

            all_categories.sort()



        # Clean up any category placeholders

        db.cleanup_category_placeholders(st.session_state.user_id)

        # Create sub-tabs for Menu
        view_menu_tab, manage_menu_tab = st.tabs(["📖 View Menu", "⚙️ Menu Management"])

        with manage_menu_tab:



            # ============================================================================

            # MENU MANAGEMENT SECTION (Combined: Add Items + Manage Categories)

            # ============================================================================

            st.subheader("📝 Menu Management")



            # Create two columns: Add Menu Item (left) and Manage Categories (right)

            col_add_item, col_manage_categories = st.columns([1, 1])



            with col_add_item:

                st.markdown("#### ➕ Add New Menu Item")



                with st.form("add_menu_item_form"):

                    # Menu item name input

                    name = st.text_input(

                        "Item Name",

                        placeholder="e.g., Nasi Lemak with Egg",

                        help="Name of your menu item or service"

                    )



                    # Price input  

                    col1, col2 = st.columns([3, 1])

                    with col1:

                        price = st.text_input(

                            "Price",

                            placeholder="8.50",

                            help="Price in your base currency"

                        )

                    with col2:

                        st.write("**MYR**")



                    # Category selection (dynamic: default + user's custom categories)

                    form_default_categories = MENU_CATEGORIES.copy()

                    form_user_categories = db.get_user_categories(st.session_state.user_id)

                    form_available_categories = list(set(form_default_categories + form_user_categories))

                    form_available_categories.sort()



                    category = st.selectbox(

                        "Category",

                        form_available_categories,

                        help="What type of menu item is this?"

                    )



                    # Optional description

                    description = st.text_area(

                        "Description (Optional)",

                        placeholder="Detailed description of your menu item...",

                        help="Optional details about your product/service"

                    )



                    # Optional stock tracking

                    col1, col2 = st.columns(2)

                    with col1:

                        track_stock = st.checkbox("Track Stock Quantity")

                    with col2:

                        if track_stock:

                            stock_quantity = st.number_input("Stock Quantity", min_value=0, value=0)

                        else:

                            stock_quantity = None



                    # Submit button

                    submitted = st.form_submit_button("Add Menu Item", use_container_width=True)



                    if submitted:

                        # Validation

                        if not name:

                            st.error("❌ Item name is required")

                        elif not price:

                            st.error("❌ Price is required")

                        elif not price.replace(".", "").isdigit():

                            st.error("❌ Price must be a valid number (e.g., 8.50)")

                        else:

                            # Create the menu item

                            menu_item_id = db.create_menu_item(

                                user_id=st.session_state.user_id,

                                name=name,

                                price=price,

                                category=category,

                                description=description if description else None,

                                stock_quantity=stock_quantity,

                                is_active=True

                            )



                            if menu_item_id:

                                st.success(f"✅ Added '{name}' to your menu!")

                                st.rerun()

                            else:

                                st.error("❌ Failed to add menu item. Please try again.")



            with col_manage_categories:

                st.markdown("#### 🏷️ Manage Categories")



                # Create tabs for category operations

                cat_tab1, cat_tab2, cat_tab3, cat_tab4 = st.tabs(["➕ Create", "👁️ View", "✏️ Edit", "🗑️ Delete"])



                with cat_tab1:

                    with st.form("create_category_form"):

                        new_category_name = st.text_input(

                            "Category Name",

                            placeholder="e.g., Breakfast Items",

                            help="Enter a new category name"

                        )



                        if st.form_submit_button("Create Category", use_container_width=True):

                            if not new_category_name:

                                st.error("❌ Category name required")

                            else:

                                result = db.add_custom_category(st.session_state.user_id, new_category_name)

                                if result:

                                    st.success(f"✅ Created '{new_category_name}'")

                                    st.rerun()

                                else:

                                    st.error("❌ Failed to create category")



                with cat_tab2:

                    st.write("**Current Categories:**")

                    if all_categories:
                        for i, category in enumerate(all_categories, 1):
                            st.write(f"{i}. {category}")

                    else:
                        st.info("No categories to view")



                with cat_tab4:

                    if len(all_categories) > 1:

                        with st.form("delete_category_form"):

                            category_to_delete = st.selectbox(

                                "Select Category",

                                [cat for cat in all_categories if cat != "other"]

                            )



                            st.warning("⚠️ Items moved to 'other'")

                            confirm = st.checkbox("Confirm delete")



                            if st.form_submit_button("Delete", use_container_width=True):

                                if not confirm:

                                    st.error("❌ Please confirm")

                                else:

                                    result = db.delete_category(st.session_state.user_id, category_to_delete)

                                    if result:

                                        st.success(f"✅ Deleted '{category_to_delete}'")

                                        st.rerun()

                                    else:

                                        st.error("❌ Delete failed")

                    else:

                        st.info("Need >1 category to delete")



                st.divider()


        with view_menu_tab:
            st.subheader("📖 Your Current Menu")

            # Always fetch fresh data from database
            menu_items = db.get_user_menu_items(st.session_state.user_id)

            if not menu_items:
                st.info("📝 No menu items yet. Add your first product or service using the Menu Management tab!")
            else:
                # Filtering Controls
                col_filter, col_status = st.columns([2, 1])



            with col_filter:

                # Category filter

                menu_categories = list(set([item.get('category', 'other') for item in menu_items]))

                # Apply same ordering to filter dropdown

                if st.session_state.category_order:

                    ordered_menu_cats = [cat for cat in st.session_state.category_order if cat in menu_categories]

                    new_menu_cats = [cat for cat in menu_categories if cat not in ordered_menu_cats]

                    menu_categories = ordered_menu_cats + sorted(new_menu_cats)

                else:

                    menu_categories.sort()



                selected_category = st.selectbox(

                    "Filter by Category",

                    ["All Categories"] + menu_categories,

                    help="Filter menu items by category"

                )



            with col_status:

                # Status filter

                status_filter = st.selectbox(

                    "Status Filter",

                    ["All Items", "Available Only", "Unavailable Only"],

                    help="Filter by availability status"

                )



            # Apply filters

            filtered_items = menu_items.copy()



            # Category filter

            if selected_category != "All Categories":

                filtered_items = [o for o in filtered_items if o.get('category') == selected_category]



            # Status filter  

            if status_filter == "Available Only":

                filtered_items = [o for o in filtered_items if o.get('is_active', True)]

            elif status_filter == "Unavailable Only":

                filtered_items = [o for o in filtered_items if not o.get('is_active', True)]



            # Show results summary

            total_count = len(menu_items)

            filtered_count = len(filtered_items)



            st.caption(f"📊 Showing {filtered_count} of {total_count} items")



            st.divider()



            # Group items by category (Restaurant Menu Style)

            if not filtered_items:

                st.info(f"No items found matching your filter criteria.")

            else:

                # Info box about category sorting

                st.info("💡 **Tip:** Use the ⬆️ and ⬇️ arrows next to each category to customize the order of your menu sections (like a restaurant menu).")



                # Group items by category

                items_by_category = {}

                for item in filtered_items:

                    cat = item.get('category', 'other')

                    if cat not in items_by_category:

                        items_by_category[cat] = []

                    items_by_category[cat].append(item)



                # Get categories in the custom order

                categories_to_display = []

                if st.session_state.category_order:

                    # Use custom order

                    for cat in st.session_state.category_order:

                        if cat in items_by_category:

                            categories_to_display.append(cat)

                    # Add any new categories not in order

                    for cat in sorted(items_by_category.keys()):

                        if cat not in categories_to_display:

                            categories_to_display.append(cat)

                else:

                    # Default alphabetical order

                    categories_to_display = sorted(items_by_category.keys())



                # Display each category section

                for cat_index, category in enumerate(categories_to_display):

                    items = items_by_category[category]



                    # Category header with sorting arrows (aligned with item buttons)

                    col_cat_header, col_spacer1, col_spacer2, col_arrow_up, col_arrow_down = st.columns([3, 1, 1, 0.5, 0.5])



                    with col_cat_header:

                        category_display = category.replace('_', ' ').title()

                        st.markdown(f"### 🏷️ {category_display}")

                        st.caption(f"{len(items)} item(s)")



                    with col_arrow_up:

                        if cat_index > 0:  # Can move up

                            if st.button("⬆️", key=f"up_{category}", help=f"Move {category_display} up", type="secondary", use_container_width=True):

                                # Initialize order if not exists

                                if not st.session_state.category_order:

                                    st.session_state.category_order = categories_to_display.copy()



                                # Swap with previous category

                                current_order = st.session_state.category_order

                                idx = current_order.index(category)

                                current_order[idx], current_order[idx-1] = current_order[idx-1], current_order[idx]

                                st.rerun()

                        else:

                            # Placeholder to maintain alignment

                            st.write("")



                    with col_arrow_down:

                        if cat_index < len(categories_to_display) - 1:  # Can move down

                            if st.button("⬇️", key=f"down_{category}", help=f"Move {category_display} down", type="secondary", use_container_width=True):

                                # Initialize order if not exists

                                if not st.session_state.category_order:

                                    st.session_state.category_order = categories_to_display.copy()



                                # Swap with next category

                                current_order = st.session_state.category_order

                                idx = current_order.index(category)

                                current_order[idx], current_order[idx+1] = current_order[idx+1], current_order[idx]

                                st.rerun()

                        else:

                            # Placeholder to maintain alignment

                            st.write("")



                    # Sort items within category by name

                    items.sort(key=lambda x: x.get('name', '').lower())



                    # Display items in this category

                    for item in items:

                        # Create a card-like display for each menu item

                        with st.container():

                            col1, col2, col3, col4, col5 = st.columns([3, 1, 1, 0.5, 0.5])



                        with col1:

                            # Menu item name and description

                            status_icon = "✅" if item["is_active"] else "⏸️"

                            st.write(f"{status_icon} **{item['name']}**")

                            if item.get("description"):

                                st.caption(item["description"][:100] + "..." if len(item["description"]) > 100 else item["description"])



                        with col2:

                            # Price

                            st.write(f"**{item['price']}** MYR")

                            if item.get("stock_quantity") is not None:

                                st.caption(f"Stock: {item['stock_quantity']}")



                        with col3:

                            # Show current status with green/red color coding

                            current_status = item["is_active"]



                            if current_status:

                                # Available - Green status display + button

                                st.markdown(

                                    '<div style="background-color: #28a745; color: white; padding: 6px 12px; border-radius: 4px; font-size: 16px; text-align: center; margin-bottom: 8px;">✅ Status: Available</div>',

                                    unsafe_allow_html=True

                                )

                                if st.button("Change to Unavailable", key=f"toggle_{item['_id']}", type="secondary", use_container_width=True):

                                    try:

                                        result = db.update_menu_item(item["_id"], is_active=False)

                                        if result:

                                            st.success(f"✅ {item['name']} status changed to Unavailable")

                                            st.rerun()

                                        else:

                                            st.error(f"❌ Failed to update {item['name']} status")

                                    except Exception as e:

                                        st.error(f"❌ Error updating {item['name']}: {str(e)}")

                            else:

                                # Unavailable - Red status display + button

                                st.markdown(

                                    '<div style="background-color: #dc3545; color: white; padding: 6px 12px; border-radius: 4px; font-size: 16px; text-align: center; margin-bottom: 8px;">⏸️ Status: Unavailable</div>',

                                    unsafe_allow_html=True

                                )

                                if st.button("Change to Available", key=f"toggle_{item['_id']}", type="secondary", use_container_width=True):

                                    try:

                                        result = db.update_menu_item(item["_id"], is_active=True)

                                        if result:

                                            st.success(f"✅ {item['name']} status changed to Available")

                                            st.rerun()

                                        else:

                                            st.error(f"❌ Failed to update {item['name']} status")

                                    except Exception as e:

                                        st.error(f"❌ Error updating {item['name']}: {str(e)}")



                        with col4:

                            # Edit button

                            if st.button("✏️", key=f"edit_{item['_id']}", help="Edit menu item"):

                                st.session_state[f"editing_{item['_id']}"] = True

                                st.rerun()



                        with col5:

                            # Delete button

                            if st.button("🗑️", key=f"delete_{item['_id']}", help="Delete menu item"):

                                try:

                                    result = db.delete_menu_item(item["_id"])

                                    if result:

                                        st.success(f"Deleted {item['name']}")

                                        st.rerun()

                                    else:

                                        st.error(f"❌ Failed to delete {item['name']}")

                                except Exception as e:

                                    st.error(f"❌ Error deleting {item['name']}: {str(e)}")



                        # Edit form (shows when edit button is clicked)

                        if st.session_state.get(f"editing_{item['_id']}", False):

                            with st.form(f"edit_form_{item['_id']}"):

                                st.subheader(f"✏️ Edit: {item['name']}")



                                # Edit fields

                                edit_name = st.text_input("Name", value=item['name'])

                                edit_price = st.number_input("Price (MYR)", value=float(item['price']), min_value=0.01, step=0.01, format="%.2f")

                                edit_description = st.text_area("Description", value=item.get('description', ''))

                                # Get dynamic categories for edit form

                                edit_default_categories = MENU_CATEGORIES.copy()

                                edit_user_categories = db.get_user_categories(st.session_state.user_id)

                                edit_available_categories = list(set(edit_default_categories + edit_user_categories))

                                edit_available_categories.sort()



                                # Find current category index, default to 0 if not found

                                current_category = item.get('category', 'main_dishes')

                                try:

                                    category_index = edit_available_categories.index(current_category)

                                except ValueError:

                                    category_index = 0



                                edit_category = st.selectbox("Category", edit_available_categories, index=category_index)

                                edit_stock = st.number_input("Stock Quantity (optional)", value=item.get('stock_quantity'), min_value=0)



                                # Form buttons

                                col_save, col_cancel = st.columns(2)

                                with col_save:

                                    submit_edit = st.form_submit_button("💾 Save Changes", type="primary", use_container_width=True)

                                with col_cancel:

                                    cancel_edit = st.form_submit_button("❌ Cancel", use_container_width=True)



                                if submit_edit:

                                    try:

                                        # Prepare update data

                                        update_data = {

                                            'name': edit_name,

                                            'price': edit_price,

                                            'description': edit_description,

                                            'category': edit_category

                                        }

                                        if edit_stock is not None and edit_stock >= 0:

                                            update_data['stock_quantity'] = int(edit_stock)



                                        result = db.update_menu_item(item["_id"], **update_data)

                                        if result:

                                            st.success(f"✅ {edit_name} updated successfully!")

                                            st.session_state[f"editing_{item['_id']}"] = False

                                            st.rerun()

                                        else:

                                            st.error(f"❌ Failed to update {edit_name}")

                                    except Exception as e:

                                        st.error(f"❌ Error updating menu item: {str(e)}")



                                if cancel_edit:

                                    st.session_state[f"editing_{item['_id']}"] = False

                                    st.rerun()



                            st.divider()  # Separator between menu items



                    # Add space after each category section

                    st.markdown("---")



    with tab3:

        st.header("� Sales & Quotes")



        # Sub-tabs for New Sale and New Quotation

        sales_tab, quotes_tab = st.tabs(["�💳 New Sale", "📋 New Quotation"])



        with sales_tab:

            st.subheader("💳 Transaction Mode")



            # Transaction Mode Selector

            col_mode, col_spacer = st.columns([2, 3])



            with col_mode:

                transaction_mode = st.radio(

                    "Transaction Mode Selection",

                    ["💳 New Sale", "↩️ Process Refund"],

                    horizontal=True,

                    help="Select whether to process a new sale or refund a previous transaction",

                    label_visibility="hidden"  # Hide label for accessibility compliance
                )



            st.divider()



            if transaction_mode == "💳 New Sale":

                # === NEW SALE MODE ===



                # Get available menu items for quick sale

                available_menu_items = [o for o in db.get_user_menu_items(st.session_state.user_id) if o["is_active"]]



                if not available_menu_items:

                    st.warning("⚠️ No active menu items available. Please add and activate some menu items first!")

                else:

                    col1, col2 = st.columns([2, 1])



                with col1:

                    st.subheader("🛒 Select Items to Sell")



                    # Quick Add Item Section

                    with st.expander("⚡ Quick Add New Item", expanded=False):

                        with st.form("quick_add_item"):

                            st.caption("Add an item that's not in your regular offerings")



                            col_name, col_price = st.columns(2)

                            with col_name:

                                quick_name = st.text_input(

                                    "Item Name",

                                    placeholder="e.g., Special Combo",

                                    help="Name of the one-time item"

                                )

                            with col_price:

                                quick_price = st.text_input(

                                    "Price",

                                    placeholder="15.00",

                                    help="Price for this item"

                                )



                            col_cat, col_qty = st.columns(2)

                            with col_cat:

                                quick_category = st.selectbox(

                                    "Category",

                                    MENU_CATEGORIES,

                                    help="What type of item is this?"

                                )

                            with col_qty:

                                quick_quantity = st.number_input(

                                    "Quantity to Sell",

                                    min_value=1,

                                    value=1,

                                    help="How many to add to cart"

                                )



                            quick_description = st.text_input(

                                "Description (Optional)",

                                placeholder="Brief description...",

                                help="Optional description"

                            )



                            submitted_quick = st.form_submit_button("⚡ Add to Offerings & Cart", use_container_width=True)



                            if submitted_quick:

                                # Validation

                                if not quick_name:

                                    st.error("❌ Item name is required")

                                elif not quick_price:

                                    st.error("❌ Price is required")

                                elif not quick_price.replace(".", "").isdigit():

                                    st.error("❌ Price must be a valid number (e.g., 15.00)")

                                else:

                                    # First, add to menu items collection

                                    offering_id = db.create_menu_item(

                                        user_id=st.session_state.user_id,

                                        name=quick_name,

                                        price=quick_price,

                                        category=quick_category,

                                        description=quick_description if quick_description else None,

                                        stock_quantity=None,  # Unlimited

                                        is_active=True

                                    )



                                    if offering_id:

                                        # Add directly to cart

                                        if 'cart' not in st.session_state:

                                            st.session_state.cart = {}



                                        unit_price = float(quick_price)

                                        total_price = quick_quantity * unit_price



                                        st.session_state.cart[offering_id] = {

                                            'offering_id': offering_id,

                                            'offering_name': quick_name,

                                            'quantity': quick_quantity,

                                            'unit_price': quick_price,

                                            'total_price': f"{total_price:.2f}"

                                        }



                                        st.success(f"✅ Added '{quick_name}' to offerings and {quick_quantity}x to cart!")

                                        st.rerun()

                                    else:

                                        st.error("❌ Failed to add item. Please try again.")



                    # Custom Combo Builder

                    with st.expander("🍽️ Create Custom Combo", expanded=False):

                        st.caption("Bundle multiple items with a special combo price")



                        with st.form("combo_builder"):

                            combo_name = st.text_input(

                                "Combo Name",

                                placeholder="e.g., Lunch Special, Student Pack",

                                help="Name for this combo deal"

                            )



                            combo_price = st.text_input(

                                "Combo Price (MYR)",

                                placeholder="25.00",

                                help="Special price for the combo (usually less than individual items)"

                            )



                            st.write("**Select Items for Combo:**")

                            combo_items = []

                            combo_individual_total = 0.0



                            # Let user select items and quantities for combo

                            for item in available_menu_items:

                                col_check, col_name, col_qty = st.columns([1, 2, 1])



                                with col_check:

                                    include_item = st.checkbox("Include", key=f"combo_{item['_id']}", label_visibility="collapsed")



                                with col_name:

                                    if include_item:

                                        st.write(f"✅ **{item['name']}** (MYR {item['price']})")

                                    else:

                                        st.write(f"**{item['name']}** (MYR {item['price']})")



                                with col_qty:

                                    if include_item:

                                        qty = st.number_input(

                                            "Qty",

                                            min_value=1,

                                            value=1,

                                            key=f"combo_qty_{item['_id']}",

                                            label_visibility="collapsed"

                                        )

                                        combo_items.append({

                                            'offering_id': item['_id'],

                                            'offering_name': item['name'],

                                            'quantity': qty,

                                            'unit_price': item['price']

                                        })

                                        combo_individual_total += float(item['price']) * qty



                            # Show savings

                            if combo_items and combo_price:

                                try:

                                    combo_price_float = float(combo_price)

                                    savings = combo_individual_total - combo_price_float

                                    if savings > 0:

                                        st.success(f"💰 Customer saves MYR {savings:.2f} with this combo!")

                                    elif savings < 0:

                                        st.warning(f"⚠️ Combo price is MYR {abs(savings):.2f} more than individual items")

                                except:

                                    pass



                            submitted_combo = st.form_submit_button("🍽️ Create Combo & Add to Cart")



                            if submitted_combo:

                                if not combo_name:

                                    st.error("❌ Combo name is required")

                                elif not combo_price or not combo_price.replace(".", "").isdigit():

                                    st.error("❌ Valid combo price is required")

                                elif not combo_items:

                                    st.error("❌ Please select at least one item for the combo")

                                else:

                                    # Create combo as a special offering

                                    combo_description = f"Combo includes: {', '.join([f'{item['quantity']}x {item['offering_name']}' for item in combo_items])}"



                                    combo_offering_id = db.create_menu_item(

                                        user_id=st.session_state.user_id,

                                        name=combo_name,

                                        price=combo_price,

                                        category="other",

                                        description=combo_description,

                                        stock_quantity=None,

                                        is_active=True

                                    )



                                    if combo_offering_id:

                                        # Add combo to cart

                                        if 'cart' not in st.session_state:

                                            st.session_state.cart = {}



                                        st.session_state.cart[combo_offering_id] = {

                                            'offering_id': combo_offering_id,

                                            'offering_name': combo_name,

                                            'quantity': 1,

                                            'unit_price': combo_price,

                                            'total_price': combo_price

                                        }



                                        st.success(f"✅ Created combo '{combo_name}' and added to cart!")

                                        st.rerun()

                                    else:

                                        st.error("❌ Failed to create combo. Please try again.")



                    st.divider()



                    # Initialize session state for cart

                    if 'cart' not in st.session_state:

                        st.session_state.cart = {}



                    # Quick Search and Filters (Golden Standard Layout)

                    col_search, col_category, col_sort = st.columns([2, 1, 1])



                    with col_search:

                        # Search bar (most important - top left)

                        search_term = st.text_input(

                            "🔍 Search",

                            placeholder="e.g., nasi lemak, teh, curry...",

                            help="Quick search by item name"

                        )



                    with col_category:

                        # Category filter (second priority)

                        item_categories = list(set([o.get('category', 'other') for o in available_menu_items]))

                        item_categories.sort()

                        selected_cat = st.selectbox(

                            "Category",

                            ["All"] + item_categories,

                            help="Filter by category"

                        )



                    with col_sort:

                        # Sort options (third priority)

                        sort_opts = {

                            "Popular First": ("name", False),  # Default for sales

                            "A-Z": ("name", False),

                            "Z-A": ("name", True),

                            "Price ↑": ("price", False),

                            "Price ↓": ("price", True)

                        }

                        selected_sort_key = st.selectbox(

                            "Sort",

                            list(sort_opts.keys()),

                            help="Sort items"

                        )



                    # Apply search and filters

                    filtered_items = available_menu_items.copy()



                    # Search filter (fuzzy search)

                    if search_term:

                        search_lower = search_term.lower()

                        filtered_items = [

                            item for item in filtered_items 

                            if search_lower in item['name'].lower() or 

                               search_lower in item.get('description', '').lower()

                        ]



                    # Category filter

                    if selected_cat != "All":

                        filtered_items = [item for item in filtered_items if item.get('category') == selected_cat]



                    # Apply sorting

                    sort_key, reverse_order = sort_opts[selected_sort_key]

                    if sort_key == "price":

                        filtered_items.sort(key=lambda x: float(x.get('price', '0')), reverse=reverse_order)

                    else:  # name sorting

                        filtered_items.sort(key=lambda x: x.get('name', '').lower(), reverse=reverse_order)



                    # Results summary (e-commerce standard)

                    total_items = len(available_menu_items)

                    showing_items = len(filtered_items)



                    if search_term or selected_cat != "All":

                        st.caption(f"📊 Showing {showing_items} of {total_items} items • Price range: MYR {min(float(item['price']) for item in filtered_items):.2f} - {max(float(item['price']) for item in filtered_items):.2f}" if showing_items > 0 else "")



                    # Display filtered offerings with enhanced layout

                    if not filtered_items:

                        st.info("🔍 No items found. Try adjusting your search or filters.")

                    else:

                        # Grid layout for better visual scanning (golden standard)

                        items_per_row = 2  # Optimal for mobile + desktop



                        # Single-column layout to avoid nesting issues

                        for item in filtered_items:

                            # Card-style layout (industry standard) - single row per item

                            with st.container():

                                # Main item row with all info

                                col_info, col_qty, col_add = st.columns([3, 1, 1])



                                with col_info:

                                    # Item name and details

                                    st.markdown(f"**{item['name']}** - **MYR {item['price']}**")



                                    # Category badge and description on same line

                                    category_display = item.get('category', 'other').replace('_', ' ').title()

                                    desc_text = f"🏷️ {category_display}"



                                    if item.get('description'):

                                        desc = item['description']

                                        short_desc = desc[:60] + "..." if len(desc) > 60 else desc

                                        desc_text += f" | {short_desc}"



                                    st.caption(desc_text)



                                with col_qty:

                                    qty_key = f"qty_{item['_id']}"



                                    # Get current cart quantity for this item

                                    current_cart_qty = st.session_state.cart.get(item['_id'], {}).get('quantity', 0)



                                    quantity = st.number_input(

                                        "Qty", 

                                        min_value=0, 

                                        value=current_cart_qty,

                                        key=qty_key,

                                        label_visibility="visible"

                                    )



                                    # Auto-update cart when quantity changes

                                    if quantity != current_cart_qty:

                                        if quantity > 0:

                                            # Add or update item in cart

                                            unit_price = float(item['price'])

                                            total_price = quantity * unit_price



                                            st.session_state.cart[item['_id']] = {

                                                'offering_id': item['_id'],

                                                'offering_name': item['name'],

                                                'quantity': quantity,

                                                'unit_price': item['price'],

                                                'total_price': f"{total_price:.2f}"

                                            }

                                        else:

                                            # Remove item from cart if quantity is 0

                                            if item['_id'] in st.session_state.cart:

                                                del st.session_state.cart[item['_id']]



                                with col_add:

                                    # Empty space - quantity control is self-explanatory

                                    st.empty()



                with col2:

                    st.subheader("🧾 Transaction Summary")



                    # Display cart contents

                    if not st.session_state.cart:

                        st.info("Cart is empty. Add items from the left.")

                    else:

                        # Show cart items

                        total_amount = 0.0

                        total_items = 0



                        for item_id, item in st.session_state.cart.items():

                            col_item, col_remove = st.columns([4, 1])

                            with col_item:

                                st.write(f"**{item['quantity']}x {item['offering_name']}** - MYR {item['total_price']}")

                            with col_remove:

                                if st.button("❌", key=f"remove_{item_id}", help="Remove"):

                                    del st.session_state.cart[item_id]

                                    st.rerun()



                            total_amount += float(item['total_price'])

                            total_items += item['quantity']



                        st.divider()



                        # Discounts Section

                        st.markdown("**💰 Discounts**")

                        col_disc_type, col_disc_val = st.columns([2, 1])



                        with col_disc_type:

                            discount_method = st.selectbox(

                                "Discount Type",

                                ["None", "Percentage (%)", "Fixed Amount (MYR)", "Preset Discounts"],

                                key="discount_method"

                            )



                        discount_amount = 0.0

                        with col_disc_val:

                            if discount_method == "Percentage (%)":

                                discount_percent = st.number_input("Discount %", 0.0, 100.0, 0.0, 0.5, key="discount_percent")

                                discount_amount = total_amount * (discount_percent / 100)

                            elif discount_method == "Fixed Amount (MYR)":

                                discount_amount = st.number_input("Discount MYR", 0.0, total_amount, 0.0, 0.50, key="discount_fixed")



                        if discount_method == "Preset Discounts":

                            preset_options = [

                                "Student (10%)", "Senior (15%)", "Staff (20%)", "Bulk Order (5%)",

                                "Loyalty Customer (8%)", "Happy Hour (12%)", "First Time (5%)", "Birthday Special (15%)"

                            ]

                            selected_preset = st.selectbox("Select Preset", preset_options, key="preset_discount")

                            preset_discounts = {

                                "Student (10%)": 10, "Senior (15%)": 15, "Staff (20%)": 20, "Bulk Order (5%)": 5,

                                "Loyalty Customer (8%)": 8, "Happy Hour (12%)": 12, "First Time (5%)": 5, "Birthday Special (15%)": 15

                            }

                            discount_percent = preset_discounts[selected_preset]

                            discount_amount = total_amount * (discount_percent / 100)

                            st.caption(f"Applied {discount_percent}% discount")



                        # Tax/VAT Section

                        st.markdown("**📊 Tax / VAT**")

                        col_tax_enable, col_tax_rate = st.columns([1, 2])



                        with col_tax_enable:

                            apply_tax = st.checkbox("Apply Tax/VAT", key="apply_tax")



                        tax_amount = 0.0

                        if apply_tax:

                            with col_tax_rate:

                                tax_rate = st.number_input("Tax Rate %", 0.0, 50.0, 6.0, 0.1, key="tax_rate", help="GST in Malaysia is 6%")

                                subtotal_after_discount = max(0.0, total_amount - discount_amount)

                                tax_amount = subtotal_after_discount * (tax_rate / 100)



                        # Calculate final totals

                        subtotal_after_discount = max(0.0, total_amount - discount_amount)

                        final_total = subtotal_after_discount + tax_amount



                        # Display totals breakdown

                        st.divider()

                        st.markdown("**📋 Order Summary**")

                        st.write(f"**Subtotal:** MYR {total_amount:.2f} ({total_items} items)")



                        if discount_amount > 0:

                            st.write(f"**Discount:** -MYR {discount_amount:.2f}")

                            st.write(f"**After Discount:** MYR {subtotal_after_discount:.2f}")



                        if tax_amount > 0:

                            st.write(f"**Tax/VAT ({tax_rate:.1f}%):** +MYR {tax_amount:.2f}")



                        st.markdown(f"### **Total: MYR {final_total:.2f}**")



                        # Customer Management & Transaction Completion

                        st.divider()

                        st.markdown("**👤 Customer Information**")



                        # Quick customer type selection

                        customer_type = st.radio(

                            "Customer Type",

                            ["Walk-in Customer", "Returning Customer", "Add New Customer"],

                            horizontal=True,

                            key="customer_type"

                        )



                        selected_customer = None

                        customer_id = None



                        if customer_type == "Returning Customer":

                            customer_search = st.text_input(

                                "Search Existing Customer", 

                                placeholder="Type name, phone, or email to search...",

                                help="Search your customer database"

                            )



                            if customer_search:

                                customers = db.search_customers(st.session_state.user_id, customer_search)

                                if customers:

                                    customer_options = [f"{c['name']} | {c.get('phone', 'No phone')} | {c.get('email', 'No email')} | {c['total_visits']} visits" for c in customers]

                                    selected_idx = st.selectbox("Select Customer", range(len(customer_options)), format_func=lambda x: customer_options[x])

                                    selected_customer = customers[selected_idx]

                                    customer_id = selected_customer['_id']

                                    st.success(f"✅ Selected: {selected_customer['name']} ({selected_customer['total_visits']} visits, MYR {selected_customer['total_spent']} spent)")

                                else:

                                    st.info("No customers found. Try a different search term.")



                        elif customer_type == "Add New Customer":

                            st.session_state.show_new_customer = True



                        # New customer form

                        if customer_type == "Add New Customer" or st.session_state.get('show_new_customer', False):

                            with st.form("add_customer", clear_on_submit=True):

                                st.markdown("**📝 New Customer Details**")



                                # Required fields row

                                col_name, col_contact = st.columns(2)

                                with col_name:

                                    new_name = st.text_input("Full Name *", placeholder="Enter customer's full name", help="Required field")



                                with col_contact:

                                    contact_method = st.selectbox("Primary Contact Method", ["Phone", "Email"], help="Choose primary contact method")



                                # Contact details row

                                col_phone, col_email = st.columns(2)

                                with col_phone:

                                    if contact_method == "Phone":

                                        new_phone = st.text_input("Phone Number *", placeholder="+60123456789", help="Required when phone is primary contact")

                                        new_email = st.text_input("Email (Optional)", placeholder="customer@email.com")

                                    else:

                                        new_phone = st.text_input("Phone Number (Optional)", placeholder="+60123456789")

                                        new_email = st.text_input("Email Address *", placeholder="customer@email.com", help="Required when email is primary contact")



                                # Additional details row  

                                col_dob, col_notes = st.columns(2)

                                with col_dob:

                                    new_birthday = st.date_input("Date of Birth", value=None, help="Optional - for birthday promotions")

                                with col_notes:

                                    new_notes = st.text_input("Notes", placeholder="Dietary preferences, allergies, etc.", help="Optional customer notes")



                                # Form buttons

                                col_submit, col_cancel = st.columns([2, 1])

                                with col_submit:

                                    submit_customer = st.form_submit_button("➕ Add Customer & Continue", type="primary", use_container_width=True)

                                with col_cancel:

                                    cancel_customer = st.form_submit_button("Cancel", use_container_width=True)



                                if submit_customer:

                                    # Validation based on contact method

                                    validation_passed = False

                                    if contact_method == "Phone" and new_name and new_phone:

                                        validation_passed = True

                                    elif contact_method == "Email" and new_name and new_email:

                                        validation_passed = True

                                    elif new_name and (new_phone or new_email):  # Fallback validation

                                        validation_passed = True



                                    if validation_passed:

                                        birthday_str = new_birthday.strftime("%Y-%m-%d") if new_birthday else None

                                        customer_id = db.create_customer(

                                            user_id=st.session_state.user_id,

                                            name=new_name,

                                            phone=new_phone if new_phone else None,

                                            email=new_email if new_email else None,

                                            birthday=birthday_str,

                                            notes=new_notes if new_notes else None

                                        )

                                        if customer_id:

                                            st.success(f"✅ Successfully added {new_name} to customer database!")

                                            selected_customer = {'_id': customer_id, 'name': new_name}

                                            st.session_state.show_new_customer = False

                                            st.rerun()

                                        else:

                                            st.error("❌ Failed to add customer. Please try again.")

                                    else:

                                        if contact_method == "Phone":

                                            st.error("❌ Name and phone number are required")

                                        else:

                                            st.error("❌ Name and email address are required")



                                if cancel_customer:

                                    st.session_state.show_new_customer = False

                                    st.rerun()



                        # Transaction completion

                        if customer_type != "Add New Customer":  # Only show transaction form if not adding customer

                            with st.form("complete_transaction"):

                                # Walk-in customer name input

                                walk_in_name = ""

                                if customer_type == "Walk-in Customer":

                                    walk_in_name = st.text_input("Customer Name (Optional)", placeholder="Leave empty for anonymous walk-in")



                                # Transaction notes

                                notes = st.text_input("Transaction Notes", placeholder="Special requests, delivery instructions, etc.")



                                # Payment method with cash handling

                                payment_method = st.selectbox(

                                    "Payment Method",

                                    ["Cash", "Card", "E-Wallet", "Bank Transfer", "Other"],

                                    help="Select payment method for records"

                                )



                                # Cash payment details

                                amount_tendered = 0.0

                                change_given = 0.0

                                if payment_method == "Cash":

                                    amount_tendered = st.number_input(

                                        f"Amount Tendered (MYR)", 

                                        min_value=final_total, 

                                        value=final_total, 

                                        step=0.50,

                                        help=f"Total due: MYR {final_total:.2f}"

                                    )

                                    change_given = amount_tendered - final_total

                                    if change_given > 0:

                                        st.info(f"💰 Change to give: MYR {change_given:.2f}")

                                    elif change_given < 0:

                                        st.error(f"⚠️ Insufficient payment: MYR {abs(change_given):.2f} short")



                                submitted = st.form_submit_button("💳 Complete Sale", use_container_width=True, type="primary")



                            if submitted:

                                # Prepare transaction items

                                transaction_items = []

                                for item in st.session_state.cart.values():

                                    transaction_items.append({

                                        "offering_id": item['offering_id'],

                                        "offering_name": item['offering_name'],

                                        "quantity": item['quantity'],

                                        "unit_price": item['unit_price'],

                                        "total_price": item['total_price']

                                    })



                                # Prepare discount and tax info for transaction notes

                                transaction_details = []

                                if discount_amount > 0:

                                    if discount_method == "Percentage (%)":

                                        transaction_details.append(f"Discount: {st.session_state.get('discount_percent', 0):.1f}% (-MYR {discount_amount:.2f})")

                                    elif discount_method == "Fixed Amount (MYR)":

                                        transaction_details.append(f"Discount: -MYR {discount_amount:.2f}")

                                    elif discount_method == "Preset Discounts":

                                        transaction_details.append(f"Discount: {selected_preset} (-MYR {discount_amount:.2f})")



                                if tax_amount > 0:

                                    transaction_details.append(f"Tax: {tax_rate:.1f}% (+MYR {tax_amount:.2f})")



                                discount_info = " | " + " | ".join(transaction_details) if transaction_details else ""



                                # Enhanced payment info

                                if payment_method == "Cash":

                                    payment_info = f" | Payment: {payment_method} | Tendered: MYR {amount_tendered:.2f} | Change: MYR {change_given:.2f}"

                                else:

                                    payment_info = f" | Payment: {payment_method}"



                                transaction_notes = f"{notes if notes else ''}{discount_info}{payment_info}".strip(" |")



                                # Determine customer information

                                final_customer_name = None

                                if selected_customer:

                                    final_customer_name = selected_customer['name']

                                elif customer_type == "Walk-in Customer" and walk_in_name:

                                    final_customer_name = walk_in_name



                                # Create transaction with final total (after discount)

                                transaction_id = db.create_transaction(

                                    user_id=st.session_state.user_id,

                                    items=transaction_items,

                                    total_amount=f"{final_total:.2f}",

                                    currency="MYR",

                                    customer_name=final_customer_name,

                                    customer_id=customer_id,

                                    notes=transaction_notes if transaction_notes else None

                                )



                                if transaction_id:

                                    # Store receipt data in session state for display

                                    receipt_data = {

                                        'transaction_id': transaction_id,

                                        'business_name': st.session_state.business_name,

                                        'date_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),

                                        'customer_name': final_customer_name or "Walk-in",

                                        'items': transaction_items,

                                        'subtotal': total_amount,

                                        'discount_amount': discount_amount,

                                        'tax_amount': tax_amount,

                                        'final_total': final_total,

                                        'payment_method': payment_method,

                                        'amount_tendered': amount_tendered if payment_method == "Cash" else None,

                                        'change_given': change_given if payment_method == "Cash" else None,

                                        'notes': notes

                                    }

                                    st.session_state.last_receipt = receipt_data



                                    st.success(f"✅ Sale completed! Transaction ID: {transaction_id[-12:]}...")



                                    # Show receipt and download options

                                    with st.expander("🧾 Receipt & Download", expanded=True):

                                        # Generate receipt text

                                        receipt_text = generate_receipt_text(receipt_data)



                                        # Display receipt

                                        st.text_area("Receipt Preview", receipt_text, height=400)



                                        # Download buttons

                                        col_download1, col_download2 = st.columns(2)

                                        with col_download1:

                                            st.download_button(

                                                "📄 Download Receipt (TXT)",

                                                receipt_text,

                                                file_name=f"receipt_{transaction_id[-12:]}.txt",

                                                mime="text/plain",

                                                use_container_width=True

                                            )

                                        with col_download2:

                                            # Convert to CSV-friendly format for customer records

                                            csv_data = generate_receipt_csv(receipt_data)

                                            st.download_button(

                                                "📊 Download Receipt (CSV)",

                                                csv_data,

                                                file_name=f"receipt_{transaction_id[-12:]}.csv",

                                                mime="text/csv",

                                                use_container_width=True

                                            )



                                    # Auto-clear cart after showing receipt

                                    if st.button("✅ New Transaction", type="primary", use_container_width=True):

                                        st.session_state.cart = {}

                                        if 'last_receipt' in st.session_state:

                                            del st.session_state.last_receipt

                                        st.rerun()

                                else:

                                    st.error("❌ Failed to complete transaction. Please try again.")



                    # Clear cart button

                    if st.session_state.cart:

                        if st.button("🗑️ Clear Cart", type="secondary", use_container_width=True):

                            st.session_state.cart = {}

                            st.rerun()



            elif transaction_mode == "↩️ Process Refund":

                # === REFUND MODE ===

                st.info("🔄 **Refund Mode Active** - Select a recent transaction to refund")



                col1, col2 = st.columns([2, 1])



                with col1:

                    st.subheader("📋 Recent Transactions (Last 30 Days)")



                    # Get recent transactions for refund (last 30 days)

                    all_transactions = db.get_user_transactions(st.session_state.user_id, limit=200)



                    # Filter transactions to only show those from last 30 days using timestamps

                    from datetime import datetime, timedelta

                    thirty_days_ago = datetime.now() - timedelta(days=30)



                    recent_transactions = []

                    for trans in all_transactions:

                        # Get timestamp - try multiple fields

                        trans_timestamp = None



                        # Try created_at first (most accurate)

                        if trans.get('created_at'):

                            if isinstance(trans['created_at'], datetime):

                                trans_timestamp = trans['created_at']

                            elif isinstance(trans['created_at'], str):

                                try:

                                    trans_timestamp = datetime.fromisoformat(trans['created_at'].replace('Z', '+00:00'))

                                except:

                                    pass



                        # Fallback to sale_date

                        if not trans_timestamp and trans.get('sale_date'):

                            try:

                                trans_timestamp = datetime.strptime(trans['sale_date'], "%Y-%m-%d")

                            except:

                                pass



                        # Include if within last 30 days

                        if trans_timestamp and trans_timestamp >= thirty_days_ago:

                            recent_transactions.append(trans)



                    if not recent_transactions:

                        st.info("No transactions from the last 30 days available for refund.")

                    else:

                        # Check for existing refunds for each transaction

                        def check_refund_status(transaction_id):

                            """Check if a transaction has been refunded and return refund info"""

                            all_user_transactions = db.get_user_transactions(st.session_state.user_id, limit=200)

                            refunds = []

                            total_refunded = 0



                            for trans in all_user_transactions:

                                notes = trans.get('notes', '')

                                if f"Original Transaction: {transaction_id}" in notes and float(trans['total_amount']) < 0:

                                    refunds.append(trans)

                                    total_refunded += abs(float(trans['total_amount']))



                            return refunds, total_refunded



                        # Transaction selector with refund status

                        transaction_options = []

                        for trans in recent_transactions:

                            # Skip refund transactions themselves

                            if float(trans['total_amount']) < 0:

                                continue



                            # Get transaction details

                            trans_id = str(trans['_id'])[-12:]

                            date_str = trans.get('sale_date', 'Unknown')



                            # Try to get time from created_at or timestamp

                            trans_time = trans.get('created_at') or trans.get('timestamp')

                            if hasattr(trans_time, 'strftime'):

                                time_str = trans_time.strftime("%H:%M")

                                date_str = f"{date_str} {time_str}"



                            customer_str = trans.get('customer_name') or 'Walk-in'



                            # Check refund status

                            refunds, total_refunded = check_refund_status(trans['_id'])

                            original_amount = float(trans['total_amount'])

                            remaining_amount = original_amount - total_refunded



                            # EXCLUDE fully refunded transactions from dropdown

                            if total_refunded >= original_amount:

                                continue  # Skip this transaction - it's fully refunded

                            elif total_refunded > 0:

                                # Partially refunded - show remaining amount available

                                option_label = f"⚠️ {trans_id} | {date_str} | {customer_str} | MYR {original_amount:.2f} (MYR {remaining_amount:.2f} available for refund)"

                            else:

                                # No refunds - show full amount

                                option_label = f"✅ {trans_id} | {date_str} | {customer_str} | MYR {original_amount:.2f}"



                            transaction_options.append((option_label, trans, refunds, total_refunded))



                        # Check if there are any refundable transactions

                        if not transaction_options:

                            st.info("✅ All transactions from the last 30 days have been fully refunded. No transactions available for refund.")

                            selected_transaction = None

                        else:

                            selected_transaction = st.selectbox(

                                "Select Transaction to Refund",

                                options=range(len(transaction_options)),

                                format_func=lambda x: transaction_options[x][0],

                                help="Choose the transaction you want to refund. Fully refunded transactions are excluded."

                            )



                        # Clear previous refund data when selecting a different transaction

                        if selected_transaction is not None:

                            current_trans_id = transaction_options[selected_transaction][1]['_id']

                            if 'last_refund' in st.session_state and st.session_state.last_refund.get('original_transaction', {}).get('_id') != current_trans_id:

                                del st.session_state.last_refund



                        if selected_transaction is not None:

                            trans_data = transaction_options[selected_transaction][1]

                            existing_refunds = transaction_options[selected_transaction][2]

                            total_refunded = transaction_options[selected_transaction][3]



                            # Show comprehensive transaction details

                            st.write("**Transaction Details:**")



                            # Transaction ID

                            st.write(f"**🆔 Transaction ID:** `{str(trans_data['_id'])[-12:]}`")



                            # Customer Name

                            customer_name = trans_data.get('customer_name') or 'Walk-in'

                            st.write(f"**👤 Customer:** {customer_name}")



                            # Date and Time

                            trans_date = trans_data.get('sale_date', 'Unknown')

                            trans_time = trans_data.get('created_at', '')

                            if hasattr(trans_time, 'strftime'):

                                trans_datetime = trans_time.strftime("%Y-%m-%d %H:%M:%S")

                            else:

                                trans_datetime = f"{trans_date} (time not available)"

                            st.write(f"**📅 Date & Time:** {trans_datetime}")



                            st.divider()



                            # Items ordered

                            st.write("**🛒 Items Ordered:**")

                            for item in trans_data['items']:

                                st.write(f"- {item['quantity']}x {item['offering_name']} @ MYR {item['unit_price']} = MYR {item['total_price']}")



                            st.divider()



                            original_amount = float(trans_data['total_amount'])

                            st.write(f"**💰 Original Total:** MYR {trans_data['total_amount']}")



                            # Show refund history if any

                            if existing_refunds:

                                st.write("**Refund History:**")

                                for refund in existing_refunds:

                                    refund_date = refund.get('created_at', 'Unknown date')

                                    if hasattr(refund_date, 'strftime'):

                                        refund_date = refund_date.strftime("%Y-%m-%d %H:%M")

                                    st.write(f"- {refund_date}: MYR {refund['total_amount']} (ID: {refund['_id'][-12:]})")



                                remaining_amount = original_amount - total_refunded

                                if remaining_amount > 0:

                                    st.success(f"**💰 Remaining Amount Available for Refund:** MYR {remaining_amount:.2f}")

                                else:

                                    st.error("❌ **This transaction has been fully refunded. No further refunds possible.**")



                with col2:

                    st.subheader("↩️ Refund Processing")



                    if not recent_transactions or selected_transaction is None:

                        st.info("Select a transaction from the left to process refund")

                    else:

                        trans_data = transaction_options[selected_transaction][1]

                        existing_refunds = transaction_options[selected_transaction][2]

                        total_refunded = transaction_options[selected_transaction][3]



                        original_amount = float(trans_data['total_amount'])

                        remaining_amount = original_amount - total_refunded



                        # Check if any refunds are possible

                        if remaining_amount <= 0:

                            st.error("❌ **Cannot process refund: This transaction has been fully refunded.**")

                            st.info(f"💡 **Total Refunded:** MYR {total_refunded:.2f} of MYR {original_amount:.2f}")

                        else:

                            # Move refund type selection OUTSIDE the form for immediate updates

                            refund_type = st.radio(

                                "Refund Type",

                                ["Full Refund", "Partial Refund"],

                                help=f"Full refund returns remaining MYR {remaining_amount:.2f}, partial allows custom amount",

                                key=f"refund_type_{trans_data['_id']}"

                            )



                            # Handle refund amount based on type (OUTSIDE form for immediate update)

                            if refund_type == "Partial Refund":

                                st.write(f"💰 **Remaining Amount:** MYR {remaining_amount:.2f}")



                                # Use text input for more control

                                refund_amount_str = st.text_input(

                                    "Refund Amount (MYR)",

                                    value="",  # Empty by default

                                    placeholder="Enter refund amount (e.g., 15.50)",

                                    help=f"💡 Enter the amount you want to refund (Maximum: MYR {remaining_amount:.2f})",

                                    key=f"refund_amount_{trans_data['_id']}"

                                )



                                # Convert to float and validate

                                try:

                                    if refund_amount_str:

                                        refund_amount = float(refund_amount_str)

                                        if refund_amount > remaining_amount:

                                            st.warning(f"⚠️ Amount cannot exceed remaining MYR {remaining_amount:.2f}")

                                        elif refund_amount <= 0:

                                            st.warning("⚠️ Please enter a positive amount")

                                        else:

                                            st.success(f"✅ Refund amount: MYR {refund_amount:.2f}")

                                    else:

                                        refund_amount = 0

                                        st.info("👆 Please enter the refund amount above")

                                except ValueError:

                                    refund_amount = 0

                                    if refund_amount_str:

                                        st.error("❌ Please enter a valid number")

                            else:

                                # Full refund - use remaining amount instead of original amount

                                refund_amount = remaining_amount

                                st.write(f"💰 **Full Refund Amount (Remaining):** MYR {refund_amount:.2f}")

                                refund_amount_str = str(refund_amount)  # Set this for form validation



                        # Form only contains reason and submit button

                        with st.form("refund_form"):

                            refund_reason = st.text_area(

                                "Refund Reason",

                                placeholder="e.g., Customer complaint, wrong order, defective item...",

                                help="Required: reason for the refund"

                            )



                            submitted_refund = st.form_submit_button("↩️ Process Refund", type="primary", use_container_width=True)



                            if submitted_refund:

                                if not refund_reason:

                                    st.error("❌ Refund reason is required")

                                elif refund_type == "Partial Refund" and (refund_amount <= 0 or not refund_amount_str):

                                    st.error("❌ Please enter a valid refund amount greater than MYR 0.00")

                                elif refund_type == "Partial Refund" and refund_amount > float(trans_data['total_amount']):

                                    st.error(f"❌ Refund amount cannot exceed original transaction amount of MYR {trans_data['total_amount']}")

                                else:

                                    # Create refund transaction (negative amount)

                                    refund_items = [{

                                        "offering_id": "refund",

                                        "offering_name": f"REFUND - Transaction {trans_data['_id'][-12:]}",

                                        "quantity": 1,

                                        "unit_price": f"-{refund_amount:.2f}",

                                        "total_price": f"-{refund_amount:.2f}"

                                    }]



                                    refund_notes = f"REFUND: {refund_reason} | Original Transaction: {trans_data['_id']} | Processed by: {st.session_state.business_name}"



                                    refund_id = db.create_transaction(

                                        user_id=st.session_state.user_id,

                                        items=refund_items,

                                        total_amount=f"-{refund_amount:.2f}",

                                        currency="MYR",

                                        customer_name=trans_data.get('customer_name'),

                                        notes=refund_notes

                                    )



                                    if refund_id:

                                        # Store refund details in session state for PDF generation outside form

                                        st.session_state.last_refund = {

                                            'refund_id': refund_id,

                                            'refund_amount': refund_amount,

                                            'original_transaction': trans_data,

                                            'refund_reason': refund_reason,

                                            'business_name': st.session_state.business_name

                                        }

                                        st.success(f"✅ Refund processed successfully!")



                                        # Display refund details

                                        st.info(f"""

                                        **Refund Details:**

                                        - Refund ID: `{refund_id[-12:]}...`

                                        - Amount: **MYR {refund_amount:.2f}**

                                        - Original Transaction: `{trans_data['_id'][-12:]}...`

                                        - Customer: {trans_data.get('customer_name') or 'Walk-in'}

                                        - Reason: {refund_reason}

                                        """)



                                        st.success("💡 **Note:** This refund has been recorded in your Sales Listing as a contra entry. The original transaction remains intact for audit purposes.")



                                    else:

                                        st.error("❌ Failed to process refund. Please try again.")



                        # PDF Download section (OUTSIDE the form)

                        if 'last_refund' in st.session_state:

                            refund_data = st.session_state.last_refund



                            # Get the refund transaction for PDF generation

                            refund_transaction = db.get_transaction_by_id(refund_data['refund_id'])



                            if refund_transaction and PDF_AVAILABLE:

                                try:

                                    pdf_data = generate_refund_receipt_pdf(

                                        refund_transaction, 

                                        refund_data['original_transaction'], 

                                        refund_data['business_name']

                                    )



                                    st.download_button(

                                        label="📄 Download Refund Receipt (PDF)",

                                        data=pdf_data,

                                        file_name=f"refund_receipt_{refund_data['refund_id'][:8]}.pdf",

                                        mime="application/pdf",

                                        use_container_width=True,

                                        key=f"download_refund_{refund_data['refund_id']}"

                                    )

                                except Exception as e:

                                    st.error(f"PDF generation failed: {e}")

                            elif 'last_refund' in st.session_state:

                                st.warning("PDF receipt not available")



        with quotes_tab:

            st.subheader("📋 Quotation Mode")

            st.caption("Create and manage quotations for your customers")



            # Quotation Mode Selector

            col_qmode, col_qspacer = st.columns([2, 3])



            with col_qmode:

                quotation_mode = st.radio(

                    "Quotation Mode Selection",

                    ["📋 New Quotation", "✏️ Edit Quotation"],

                    horizontal=True,

                    help="Select whether to create a new quotation or edit an existing one"

                )



            st.divider()



            # New Quotation Mode

            if quotation_mode == "📋 New Quotation":

                st.markdown("### 🛒 Build Quotation")



                # Quotation-specific info

                col_validity, col_terms = st.columns(2)



                with col_validity:

                    validity_days = st.number_input(

                        "Valid for (days)",

                        min_value=1,

                        max_value=365,

                        value=30,

                        help="How many days this quotation is valid"

                    )



                with col_terms:

                    # Preset payment terms dropdown

                    payment_terms_presets = [

                        "Custom",

                        "Payment upon acceptance",

                        "50% deposit, 50% on delivery",

                        "30% deposit, 70% on completion",

                        "Net 30 days",

                        "Net 60 days",

                        "Cash on delivery",

                        "Full payment before delivery"

                    ]

                    selected_terms = st.selectbox(

                        "Payment Terms",

                        payment_terms_presets,

                        help="Standard payment terms or select Custom"

                    )



                    if selected_terms == "Custom":

                        payment_terms = st.text_input(

                            "Enter custom payment terms",

                            placeholder="e.g., 20% deposit, balance within 14 days"

                        )

                    else:

                        payment_terms = selected_terms



                # Notes/Description

                with st.expander("📝 Additional Notes"):

                    quotation_notes = st.text_area(

                        "Notes (optional)",

                        placeholder="Any additional information, special conditions, or remarks...",

                        height=100

                    )



                st.divider()



                # Quick Add section (same as New Sale)

                with st.expander("⚡ Quick Add New Item", expanded=False):

                    with st.form(key="quotation_quick_add"):

                        col_name, col_price = st.columns([3, 1])



                        with col_name:

                            quick_name = st.text_input("Item Name*", placeholder="e.g., Premium Service Package")



                        with col_price:

                            quick_price = st.text_input("Price (MYR)*", placeholder="0.00")



                        col_cat, col_qty = st.columns(2)



                        with col_cat:

                            quick_category = st.selectbox(

                                "Category*",

                                MENU_CATEGORIES,

                                help="Select item category"

                            )



                        with col_qty:

                            quick_quantity = st.number_input(

                                "Quantity",

                                min_value=1,

                                value=1,

                                step=1

                            )



                        quick_description = st.text_area(

                            "Description (optional)",

                            placeholder="Brief description...",

                            height=68

                        )



                        if st.form_submit_button("➕ Add to Quotation", use_container_width=True):

                            if not quick_name:

                                st.error("❌ Item name is required")

                            elif not quick_price:

                                st.error("❌ Price is required")

                            elif not quick_price.replace(".", "").isdigit():

                                st.error("❌ Price must be a valid number")

                            else:

                                # Add to menu items and cart

                                offering_id = db.create_menu_item(

                                    user_id=st.session_state.user_id,

                                    name=quick_name,

                                    price=quick_price,

                                    category=quick_category,

                                    description=quick_description if quick_description else None,

                                    stock_quantity=None,

                                    is_active=True

                                )



                                if offering_id:

                                    if 'cart' not in st.session_state:

                                        st.session_state.cart = {}



                                    unit_price = float(quick_price)

                                    total_price = quick_quantity * unit_price



                                    st.session_state.cart[offering_id] = {

                                        'offering_id': offering_id,

                                        'offering_name': quick_name,

                                        'quantity': quick_quantity,

                                        'unit_price': unit_price,

                                        'total_price': total_price

                                    }



                                    st.success(f"✅ Added {quick_name} to quotation!")

                                    st.rerun()



                st.divider()



                # Select items from menu

                st.markdown("### 🍽️ Select Items from Menu")



                # Get all active menu items

                all_offerings = db.get_user_menu_items(st.session_state.user_id)

                # Filter to only active items
                all_offerings = [item for item in all_offerings if item.get('is_active', True)]



                if not all_offerings:

                    st.info("📝 No items in your menu yet. Use Quick Add above to create items.")

                else:

                    # Category filter

                    categories = ["All"] + list(set([item['category'] for item in all_offerings]))

                    selected_category = st.selectbox("Filter by category:", categories)



                    # Filter offerings

                    if selected_category != "All":

                        filtered_offerings = [o for o in all_offerings if o['category'] == selected_category]

                    else:

                        filtered_offerings = all_offerings



                    # Display offerings

                    for offering in filtered_offerings:

                        col1, col2, col3 = st.columns([3, 1, 1])



                        with col1:

                            st.write(f"**{offering['name']}**")

                            if offering.get('description'):

                                st.caption(offering['description'][:80] + "..." if len(offering.get('description', '')) > 80 else offering.get('description', ''))



                        with col2:

                            st.write(f"**RM {float(offering['price']):.2f}**")



                        with col3:

                            if st.button("➕ Add", key=f"quot_add_{offering['_id']}", use_container_width=True):

                                if 'cart' not in st.session_state:

                                    st.session_state.cart = {}



                                offering_id = str(offering['_id'])



                                if offering_id in st.session_state.cart:

                                    st.session_state.cart[offering_id]['quantity'] += 1

                                    st.session_state.cart[offering_id]['total_price'] = (

                                        st.session_state.cart[offering_id]['quantity'] * 

                                        st.session_state.cart[offering_id]['unit_price']

                                    )

                                else:

                                    st.session_state.cart[offering_id] = {

                                        'offering_id': offering_id,

                                        'offering_name': offering['name'],

                                        'quantity': 1,

                                        'unit_price': float(offering['price']),

                                        'total_price': float(offering['price'])

                                    }



                                st.rerun()



                st.divider()



                # Cart/Quotation Preview

                st.markdown("### 🛒 Quotation Cart")



                if 'cart' not in st.session_state or len(st.session_state.cart) == 0:

                    st.info("🛒 Cart is empty. Add items from the menu above.")

                else:

                    # Display cart items

                    for offering_id, item in list(st.session_state.cart.items()):

                        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])



                        with col1:

                            st.write(f"**{item['offering_name']}**")



                        with col2:

                            new_qty = st.number_input(

                                "Qty",

                                min_value=1,

                                value=item['quantity'],

                                key=f"quot_qty_{offering_id}",

                                label_visibility="collapsed"

                            )



                            if new_qty != item['quantity']:

                                st.session_state.cart[offering_id]['quantity'] = new_qty

                                st.session_state.cart[offering_id]['total_price'] = new_qty * item['unit_price']

                                st.rerun()



                        with col3:

                            st.write(f"RM {float(item['total_price']):.2f}")



                        with col4:

                            if st.button("🗑️", key=f"quot_remove_{offering_id}", help="Remove item"):

                                del st.session_state.cart[offering_id]

                                st.rerun()



                    st.divider()



                    # Calculate totals

                    total_amount = sum(item['total_price'] for item in st.session_state.cart.values())

                    tax_rate = 0.06  # 6% SST

                    tax_amount = total_amount * tax_rate

                    final_total = total_amount + tax_amount



                    # Display totals

                    col1, col2 = st.columns([3, 1])



                    with col2:

                        st.write(f"**Subtotal:** RM {total_amount:.2f}")

                        st.write(f"**Tax (6% SST):** RM {tax_amount:.2f}")

                        st.write(f"**Total:** RM {final_total:.2f}")



                    st.divider()



                    # Customer selection (REQUIRED for quotations)

                    st.markdown("### 👤 Customer Information")



                    all_customers = db.search_customers(st.session_state.user_id, "")



                    if not all_customers:

                        st.warning("⚠️ No customers found. Please add a customer first.")

                        customer_name = st.text_input("Customer Name*", placeholder="Enter customer name")

                        customer_id = None

                    else:

                        customer_option = st.selectbox(

                            "Select Customer*",

                            options=["Select a customer..."] + [c['name'] for c in all_customers],

                            help="Customer selection is required for quotations"

                        )



                        if customer_option == "Select a customer...":

                            st.error("❌ Please select a customer to generate quotation")

                            customer_id = None

                            customer_name = None

                        else:

                            selected_customer = next(c for c in all_customers if c['name'] == customer_option)

                            customer_id = str(selected_customer['_id'])

                            customer_name = selected_customer['name']



                    st.divider()



                    # Generate Quotation button

                    if st.button("📋 Generate Quotation", type="primary", use_container_width=True):

                        if not customer_name:

                            st.error("❌ Customer selection is required for quotations")

                        else:

                            # Prepare quotation items

                            quotation_items = []

                            for item in st.session_state.cart.values():

                                quotation_items.append({

                                    "offering_id": item['offering_id'],

                                    "offering_name": item['offering_name'],

                                    "quantity": item['quantity'],

                                    "unit_price": item['unit_price'],

                                    "total_price": item['total_price']

                                })



                            # Create quotation

                            quotation_id = db.create_quotation(

                                user_id=st.session_state.user_id,

                                customer_id=customer_id,

                                customer_name=customer_name,

                                line_items=quotation_items,

                                subtotal=total_amount,

                                tax_amount=tax_amount,

                                total_amount=final_total,

                                validity_days=validity_days,

                                payment_terms=payment_terms if payment_terms else None,

                                notes=quotation_notes if quotation_notes else None,

                                status="Draft"

                            )



                            if quotation_id:

                                # Clear cart

                                st.session_state.cart = {}



                                # Get quotation details for display

                                quotation = db.get_quotation_by_id(quotation_id)



                                st.success(f"✅ Quotation {quotation['quotation_number']} generated successfully!")



                                st.balloons()



                                st.info(f"💡 View and download this quotation in the **📋 Quotations Listing** tab")



                                # Show summary

                                with st.expander("📋 Quotation Summary", expanded=True):

                                    st.write(f"**Quotation Number:** {quotation['quotation_number']}")

                                    st.write(f"**Customer:** {customer_name}")

                                    st.write(f"**Total Amount:** RM {final_total:.2f}")

                                    st.write(f"**Valid Until:** {quotation['valid_until']}")

                                    st.write(f"**Payment Terms:** {payment_terms}")



                                    if quotation_notes:

                                        st.write(f"**Notes:** {quotation_notes}")

                            else:

                                st.error("❌ Failed to generate quotation. Please try again.")



            # Edit Quotation Mode

            elif quotation_mode == "✏️ Edit Quotation":

                st.markdown("### ✏️ Edit Existing Quotation")



                # Get all quotations

                all_quotations = db.get_user_quotations(st.session_state.user_id)



                if not all_quotations:

                    st.info("📋 No quotations found. Create your first quotation above!")

                else:

                    # Filter out converted quotations

                    editable_quotations = [q for q in all_quotations if not q.get('converted_to_sale', False)]



                    if not editable_quotations:

                        st.info("📋 No editable quotations. All quotations have been converted to sales.")

                    else:

                        # Quotation selection dropdown

                        quotation_options = [

                            f"{q['quotation_number']} - {q['customer_name']} (RM {q['total_amount']:.2f}) - {q['status']}"

                            for q in editable_quotations

                        ]



                        selected_quot_option = st.selectbox(

                            "Select Quotation to Edit",

                            options=["Select a quotation..."] + quotation_options

                        )



                        if selected_quot_option != "Select a quotation...":

                            # Find selected quotation

                            selected_index = quotation_options.index(selected_quot_option)

                            selected_quotation = editable_quotations[selected_index]



                            # Load quotation into cart

                            if st.button("📥 Load Quotation into Cart", type="primary"):

                                st.session_state.cart = {}



                                for item in selected_quotation['line_items']:

                                    st.session_state.cart[item['offering_id']] = {

                                        'offering_id': item['offering_id'],

                                        'offering_name': item['offering_name'],

                                        'quantity': item['quantity'],

                                        'unit_price': item['unit_price'],

                                        'total_price': item['total_price']

                                    }



                                # Store quotation ID for updating

                                st.session_state.editing_quotation_id = str(selected_quotation['_id'])



                                st.success(f"✅ Loaded {selected_quotation['quotation_number']} into cart!")

                                st.info("💡 Switch to 'New Quotation' mode above to modify items, then save changes.")

                                st.rerun()



                            # Show quotation details

                            with st.expander("📋 Current Quotation Details", expanded=True):

                                st.write(f"**Quotation Number:** {selected_quotation['quotation_number']}")

                                st.write(f"**Customer:** {selected_quotation['customer_name']}")

                                st.write(f"**Status:** {selected_quotation['status']}")

                                st.write(f"**Total Amount:** RM {selected_quotation['total_amount']:.2f}")

                                st.write(f"**Valid Until:** {selected_quotation['valid_until']}")



                                st.write("**Line Items:**")

                                for item in selected_quotation['line_items']:

                                    st.write(f"- {item['quantity']}x {item['offering_name']} @ RM {float(item['unit_price']):.2f} = RM {float(item['total_price']):.2f}")



    with tab6:

        st.header("👥 Customer Listing")



        # Customer search and filters

        col_search, col_filter, col_add = st.columns([2, 1, 1])



        with col_search:

            customer_search_term = st.text_input(

                "🔍 Search Customers",

                placeholder="Name, phone, email...",

                help="Search your customer database"

            )



        with col_filter:

            customer_filter = st.selectbox(

                "Filter",

                ["All Customers", "Active Only", "Recent Customers (30 days)", "Top Spenders"],

                help="Filter customer list"

            )



        with col_add:

            col_add_btn, col_sync_btn = st.columns(2)

            with col_add_btn:

                if st.button("➕ Add", type="primary", use_container_width=True):

                    st.session_state.show_customer_form = True

            with col_sync_btn:

                if st.button("🔄 Sync", help="Sync customers from sales", use_container_width=True):

                    with st.spinner("Syncing customers from sales..."):

                        new_customers_count = db.sync_customers_from_transactions(st.session_state.user_id)

                        if new_customers_count > 0:

                            st.success(f"✅ Added {new_customers_count} new customers from sales!")

                        else:

                            st.info("ℹ️ No new customers to sync.")

                        st.rerun()



        # Add new customer form

        if st.session_state.get('show_customer_form', False):

            with st.expander("📝 Add New Customer", expanded=True):

                with st.form("add_new_customer"):

                    # Compact 3-column layout

                    col1, col2, col3 = st.columns([2, 2, 1])



                    with col1:

                        new_customer_name = st.text_input("Name *", placeholder="Full name")

                        new_customer_phone = st.text_input("Phone", placeholder="+60123456789")



                    with col2:

                        new_customer_email = st.text_input("Email", placeholder="email@domain.com")

                        new_customer_notes = st.text_input("Notes", placeholder="Preferences...")



                    with col3:

                        new_customer_birthday = st.date_input("Birthday", value=None, help="Optional")

                        # Marketing checkboxes in compact layout

                        sms_opt_in = st.checkbox("SMS", value=True, help="SMS marketing")

                        email_opt_in = st.checkbox("Email", value=True, help="Email marketing")



                    submitted_customer = st.form_submit_button("Add Customer", type="primary")



                    if submitted_customer:

                        if new_customer_name and (new_customer_phone or new_customer_email):

                            birthday_str = new_customer_birthday.strftime("%Y-%m-%d") if new_customer_birthday else None

                            customer_id = db.create_customer(

                                user_id=st.session_state.user_id,

                                name=new_customer_name,

                                phone=new_customer_phone if new_customer_phone else None,

                                email=new_customer_email if new_customer_email else None,

                                birthday=birthday_str,

                                notes=new_customer_notes if new_customer_notes else None

                            )

                            if customer_id:

                                st.success(f"✅ Added {new_customer_name} to customer database!")

                                st.session_state.show_customer_form = False

                                st.rerun()

                            else:

                                st.error("❌ Failed to add customer")

                        else:

                            st.error("❌ Name and at least phone or email are required")



                if st.button("Cancel", key="cancel_customer_form"):

                    st.session_state.show_customer_form = False

                    st.rerun()



        # Auto-sync customers from transactions (silent background sync)

        if not st.session_state.get('customer_auto_synced', False):

            try:

                db.sync_customers_from_transactions(st.session_state.user_id)

                st.session_state.customer_auto_synced = True

            except Exception as e:

                # Silent fail for auto-sync

                pass



        # Get and display customers

        all_customers = db.search_customers(st.session_state.user_id, customer_search_term)



        if not all_customers:

            if customer_search_term:

                st.info(f"No customers found matching '{customer_search_term}'")

            else:

                st.info("No customers in your database yet. Add your first customer above!")

        else:

            # Apply filters

            filtered_customers = all_customers.copy()



            if customer_filter == "Active Only":

                filtered_customers = [c for c in filtered_customers if c.get('is_active', True)]

            elif customer_filter == "Recent Customers (30 days)":

                from datetime import timedelta

                thirty_days_ago = datetime.now() - timedelta(days=30)

                filtered_customers = []

                for c in all_customers:

                    last_visit = c.get('last_visit')

                    if last_visit:

                        # Handle both datetime objects and string dates

                        if isinstance(last_visit, str):

                            try:

                                last_visit_dt = datetime.strptime(last_visit, "%Y-%m-%d")

                            except:

                                continue  # Skip if date format is invalid

                        else:

                            last_visit_dt = last_visit



                        if last_visit_dt >= thirty_days_ago:

                            filtered_customers.append(c)

            elif customer_filter == "Top Spenders":

                filtered_customers.sort(key=lambda x: float(x.get('total_spent', '0')), reverse=True)

                filtered_customers = filtered_customers[:20]  # Top 20 spenders



            # Customer statistics

            total_customers = len(all_customers)

            showing_customers = len(filtered_customers)

            total_spent_all = sum(float(c.get('total_spent', '0')) for c in all_customers)

            total_visits_all = sum(c.get('total_visits', 0) for c in all_customers)



            # Stats row

            col1, col2, col3, col4 = st.columns(4)

            with col1:

                st.metric("Total Customers", total_customers)

            with col2:

                st.metric("Total Customer Spending", f"MYR {total_spent_all:.2f}")

            with col3:

                st.metric("Total Customer Visits", total_visits_all)

            with col4:

                avg_per_customer = total_spent_all / total_customers if total_customers > 0 else 0

                st.metric("Avg per Customer", f"MYR {avg_per_customer:.2f}")



            if showing_customers != total_customers:

                st.caption(f"Showing {showing_customers} of {total_customers} customers")



            st.divider()



            # Export options for customers

            st.subheader("📊 Export Customer Report")

            col_csv_cust, col_excel_cust, col_pdf_cust = st.columns(3)



            with col_csv_cust:

                if st.button("📄 Export CSV", key="customer_csv", use_container_width=True):

                    csv_lines = ["Customer ID,Name,Phone,Email,Birthday,Total Visits,Total Spent (MYR),Member Since,Notes"]

                    for c in filtered_customers:

                        customer_id = c.get('customer_id', 'N/A')

                        csv_lines.append(f"{customer_id},{c['name']},{c.get('phone', '')},{c.get('email', '')},{c.get('birthday', '')},{c.get('total_visits', 0)},{c.get('total_spent', 0)},{str(c.get('created_at', ''))[:10]},{c.get('notes', '')}")



                    csv_data = "\n".join(csv_lines)

                    st.download_button(

                        "📥 Download Customer CSV",

                        csv_data,

                        file_name=f"customer_report_{datetime.now().strftime('%Y%m%d')}.csv",

                        mime="text/csv",

                        use_container_width=True

                    )



            with col_excel_cust:

                if st.button("📊 Export Excel", key="customer_excel", use_container_width=True):

                    try:

                        excel_data = generate_customers_excel(filtered_customers, st.session_state.business_name)

                        st.download_button(

                            "📥 Download Customer Excel",

                            excel_data,

                            file_name=f"customer_report_{datetime.now().strftime('%Y%m%d')}.xlsx",

                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",

                            use_container_width=True

                        )

                    except Exception as e:

                        st.error(f"Excel export error: {str(e)}")



            with col_pdf_cust:

                if st.button("📄 Export PDF", key="customer_pdf", use_container_width=True):

                    try:

                        pdf_html = generate_customers_pdf_html(filtered_customers, st.session_state.business_name)

                        st.download_button(

                            "📥 Download Customer PDF (HTML)",

                            pdf_html,

                            file_name=f"customer_report_{datetime.now().strftime('%Y%m%d')}.html",

                            mime="text/html",

                            use_container_width=True,

                            help="Download as HTML file - can be converted to PDF using browser print function"

                        )

                    except Exception as e:

                        st.error(f"PDF export error: {str(e)}")



            st.divider()



            # Customer list with detailed cards

            for customer in filtered_customers:

                with st.container():

                    # Customer card layout

                    col_info, col_stats, col_actions = st.columns([2, 1, 1])



                    with col_info:

                        # Customer name and ID

                        customer_id = customer.get('customer_id', 'N/A')

                        st.markdown(f"### {customer['name']}")

                        st.caption(f"🆔 Customer ID: **{customer_id}**")



                        contact_info = []

                        if customer.get('phone'):

                            contact_info.append(f"📱 {customer['phone']}")

                        if customer.get('email'):

                            contact_info.append(f"📧 {customer['email']}")



                        if contact_info:

                            st.caption(" | ".join(contact_info))



                        # Birthday and notes

                        if customer.get('birthday'):

                            st.caption(f"🎂 Birthday: {customer['birthday']}")

                        if customer.get('notes'):

                            st.caption(f"📝 {customer['notes']}")



                        # Marketing preferences

                        marketing_prefs = []

                        if customer.get('sms_marketing', True):

                            marketing_prefs.append("📱 SMS OK")

                        if customer.get('email_marketing', True):

                            marketing_prefs.append("📧 Email OK")



                        if marketing_prefs:

                            st.caption("Marketing: " + " | ".join(marketing_prefs))



                    with col_stats:

                        # Customer statistics

                        st.metric("Visits", customer.get('total_visits', 0))

                        st.metric("Total Spent", f"MYR {customer.get('total_spent', '0.00')}")



                        if customer.get('last_visit'):

                            st.caption(f"Last visit: {customer['last_visit']}")

                        else:

                            st.caption("No visits yet")



                        # Customer loyalty indicator

                        visits = customer.get('total_visits', 0)

                        if visits >= 10:

                            st.success("🌟 VIP Customer")

                        elif visits >= 5:

                            st.info("⭐ Loyal Customer")

                        elif visits >= 1:

                            st.info("👍 Regular")

                        else:

                            st.caption("🆕 New Customer")



                    with col_actions:

                        # Action buttons

                        if st.button("✏️ Edit", key=f"edit_{customer['_id']}", help="Edit customer info"):

                            st.session_state[f"edit_customer_{customer['_id']}"] = True



                        if st.button("📧 Send Promo", key=f"promo_{customer['_id']}", help="Send promotion", disabled=not (customer.get('phone') or customer.get('email'))):

                            st.info("🚧 Marketing features coming soon!")



                        # Customer status toggle

                        if customer.get('is_active', True):

                            if st.button("⏸️ Deactivate", key=f"deactivate_{customer['_id']}", help="Mark as inactive"):

                                # Would need to implement update_customer method

                                st.info("🚧 Customer status update coming soon!")

                        else:

                            if st.button("▶️ Activate", key=f"activate_{customer['_id']}", help="Mark as active"):

                                st.info("🚧 Customer status update coming soon!")



                    # Edit form (if editing)

                    if st.session_state.get(f"edit_customer_{customer['_id']}", False):

                        with st.expander(f"✏️ Edit {customer['name']}", expanded=True):

                            with st.form(f"edit_customer_{customer['_id']}"):

                                edit_col1, edit_col2 = st.columns(2)



                                with edit_col1:

                                    edit_name = st.text_input("Name", value=customer['name'])

                                    edit_phone = st.text_input("Phone", value=customer.get('phone', ''))



                                    # Parse birthday

                                    edit_birthday = None

                                    if customer.get('birthday'):

                                        try:

                                            edit_birthday = datetime.strptime(customer['birthday'], "%Y-%m-%d").date()

                                        except:

                                            pass

                                    edit_birthday = st.date_input("Birthday", value=edit_birthday)



                                with edit_col2:

                                    edit_email = st.text_input("Email", value=customer.get('email', ''))

                                    edit_notes = st.text_area("Notes", value=customer.get('notes', ''))



                                col_save, col_cancel = st.columns(2)

                                with col_save:

                                    if st.form_submit_button("💾 Save Changes", type="primary"):

                                        st.info("🚧 Customer editing coming soon!")

                                        st.session_state[f"edit_customer_{customer['_id']}"] = False

                                        st.rerun()



                                with col_cancel:

                                    if st.form_submit_button("❌ Cancel"):

                                        st.session_state[f"edit_customer_{customer['_id']}"] = False

                                        st.rerun()



                    st.divider()



            # Export options

            st.subheader("📤 Export Customer Data")



            col_export1, col_export2, col_export3 = st.columns(3)



            with col_export1:

                if st.button("📱 SMS Marketing List", help="Export phone numbers for SMS campaigns"):

                    sms_customers = [c for c in all_customers if c.get('phone') and c.get('sms_marketing', True)]

                    if sms_customers:

                        phone_list = [c['phone'] for c in sms_customers]

                        st.text_area("Phone Numbers (copy for SMS service):", "\n".join(phone_list), height=100)

                        st.caption(f"Found {len(phone_list)} customers opted in for SMS")

                    else:

                        st.info("No customers have phone numbers with SMS opt-in")



            with col_export2:

                if st.button("📧 Email Marketing List", help="Export emails for email campaigns"):

                    email_customers = [c for c in all_customers if c.get('email') and c.get('email_marketing', True)]

                    if email_customers:

                        email_list = [c['email'] for c in email_customers]

                        st.text_area("Email Addresses (copy for email service):", "\n".join(email_list), height=100)

                        st.caption(f"Found {len(email_list)} customers opted in for email")

                    else:

                        st.info("No customers have emails with email opt-in")



            with col_export3:

                if st.button("🎂 Birthday List", help="Export upcoming birthdays"):

                    birthday_customers = [c for c in all_customers if c.get('birthday')]

                    if birthday_customers:

                        # Sort by birthday (month/day only)

                        current_month_day = datetime.now().strftime("%m-%d")



                        birthday_list = []

                        for c in birthday_customers:

                            try:

                                birthday_obj = datetime.strptime(c['birthday'], "%Y-%m-%d")

                                month_day = birthday_obj.strftime("%m-%d")

                                birthday_list.append(f"{c['name']}: {birthday_obj.strftime('%B %d')} ({c.get('phone', 'No phone')})")

                            except:

                                pass



                        st.text_area("Customer Birthdays:", "\n".join(birthday_list), height=100)

                        st.caption(f"Found {len(birthday_list)} customers with birthdays")

                    else:

                        st.info("No customers have birthday information")

    with tab4:
        st.header("� Quotations Listing")
        st.caption("View and manage all your quotations")

        # Get all quotations for this user
        all_quotations = db.get_user_quotations(st.session_state.user_id)

        if not all_quotations:
            st.info("📝 No quotations yet. Create your first quotation in the Sales & Quotes tab!")
        else:
            # Status filter
            col_filter1, col_filter2, col_filter3 = st.columns([2, 2, 2])

            with col_filter1:
                status_filter = st.selectbox(
                    "Filter by Status:",
                    ["All", "Draft", "Sent", "Accepted", "Rejected", "Expired"],
                    key="quotation_status_filter"
                )

            with col_filter2:
                # Get unique customers from quotations
                unique_customers = list(set([q.get('customer_name', 'Unknown') for q in all_quotations]))
                customer_filter = st.selectbox(
                    "Filter by Customer:",
                    ["All"] + sorted(unique_customers),
                    key="quotation_customer_filter"
                )

            with col_filter3:
                search_term = st.text_input(
                    "Search by Quotation #:",
                    placeholder="QT-2025-001",
                    key="quotation_search"
                )

            # Apply filters
            filtered_quotations = all_quotations

            if status_filter != "All":
                filtered_quotations = [q for q in filtered_quotations if q.get('status', '') == status_filter]

            if customer_filter != "All":
                filtered_quotations = [q for q in filtered_quotations if q.get('customer_name', '') == customer_filter]

            if search_term:
                filtered_quotations = [q for q in filtered_quotations if search_term.upper() in q.get('quotation_number', '').upper()]

            st.write(f"**Showing {len(filtered_quotations)} of {len(all_quotations)} quotations**")

            st.divider()

            # Display quotations
            if not filtered_quotations:
                st.warning("No quotations match your filters.")
            else:
                # Sort by created_at descending (newest first)
                filtered_quotations.sort(key=lambda x: x.get('created_at', datetime.min), reverse=True)

                for quotation in filtered_quotations:
                    # Status badge colors
                    status = quotation.get('status', 'Draft')
                    if status == "Draft":
                        status_color = "🟦"
                    elif status == "Sent":
                        status_color = "🟨"
                    elif status == "Accepted":
                        status_color = "🟩"
                    elif status == "Rejected":
                        status_color = "🟥"
                    elif status == "Expired":
                        status_color = "⚫"
                    else:
                        status_color = "⚪"

                    # Create expander for each quotation
                    with st.expander(
                        f"{status_color} **{quotation.get('quotation_number', 'N/A')}** - {quotation.get('customer_name', 'Unknown')} - RM {float(quotation.get('total_amount', 0)):.2f} ({status})"
                    ):
                        col1, col2 = st.columns([2, 1])

                        with col1:
                            st.write(f"**Customer:** {quotation.get('customer_name', 'Unknown')}")
                            st.write(f"**Status:** {status_color} {status}")
                            st.write(f"**Created:** {quotation.get('created_at', 'N/A').strftime('%Y-%m-%d %H:%M') if isinstance(quotation.get('created_at'), datetime) else quotation.get('created_at', 'N/A')}")
                            st.write(f"**Valid Until:** {quotation.get('valid_until', 'N/A')}")
                            if quotation.get('payment_terms'):
                                st.write(f"**Payment Terms:** {quotation.get('payment_terms')}")

                        with col2:
                            st.write(f"**Subtotal:** RM {float(quotation.get('subtotal', 0)):.2f}")
                            st.write(f"**Tax (6%):** RM {float(quotation.get('tax_amount', 0)):.2f}")
                            st.write(f"**Total:** RM {float(quotation.get('total_amount', 0)):.2f}")

                        # Line items
                        st.write("**Line Items:**")
                        line_items = quotation.get('line_items', [])
                        for item in line_items:
                            st.write(f"- {item.get('offering_name', 'Unknown')} x {item.get('quantity', 0)} @ RM {float(item.get('unit_price', 0)):.2f} = RM {float(item.get('total_price', 0)):.2f}")

                        # Notes
                        if quotation.get('notes'):
                            st.write(f"**Notes:** {quotation.get('notes')}")

                        st.divider()

                        # Action buttons
                        btn_col1, btn_col2, btn_col3, btn_col4 = st.columns([1, 1, 1, 1])

                        with btn_col1:
                            if st.button("📄 Download PDF", key=f"pdf_{quotation.get('_id')}"):
                                st.warning("🚧 PDF generation coming soon!")

                        with btn_col2:
                            if status == "Accepted" and not quotation.get('converted_to_sale', False):
                                if st.button("💰 Convert to Sale", key=f"convert_{quotation.get('_id')}"):
                                    st.warning("🚧 Convert to Sale feature coming soon!")

                        with btn_col3:
                            if status in ["Draft", "Sent"]:
                                new_status = st.selectbox(
                                    "Change Status:",
                                    ["Draft", "Sent", "Accepted", "Rejected", "Expired"],
                                    index=["Draft", "Sent", "Accepted", "Rejected", "Expired"].index(status),
                                    key=f"status_{quotation.get('_id')}"
                                )
                                if new_status != status:
                                    if st.button("✅ Update", key=f"update_{quotation.get('_id')}"):
                                        from bson import ObjectId
                                        if db.update_quotation_status(ObjectId(quotation.get('_id')), new_status):
                                            st.success(f"Status updated to {new_status}!")
                                            st.rerun()
                                        else:
                                            st.error("Failed to update status")

                        with btn_col4:
                            if status in ["Draft", "Rejected", "Expired"]:
                                if st.button("🗑️ Delete", key=f"delete_{quotation.get('_id')}"):
                                    from bson import ObjectId
                                    if db.delete_quotation(ObjectId(quotation.get('_id'))):
                                        st.success("Quotation deleted!")
                                        st.rerun()
                                    else:
                                        st.error("Failed to delete quotation")

    with tab5:
        st.header("📈 Sales Listing")



        # Sales overview cards

        col_total, col_today, col_week = st.columns(3)



        # Get transaction data (sorted by newest first)

        all_transactions = db.get_user_transactions(st.session_state.user_id, limit=1000)

        today_date = datetime.now().strftime("%Y-%m-%d")



        # Calculate metrics

        total_sales = len(all_transactions)

        total_revenue = sum(float(t['total_amount']) for t in all_transactions)

        today_transactions = [t for t in all_transactions if t.get('sale_date') == today_date]

        today_revenue = sum(float(t['total_amount']) for t in today_transactions)



        with col_total:

            st.metric("Total Sales", total_sales, help="All time sales count")

            st.metric("Total Revenue", f"MYR {total_revenue:.2f}", help="All time revenue")



        with col_today:

            st.metric("Today's Sales", len(today_transactions), help="Sales made today")

            st.metric("Today's Revenue", f"MYR {today_revenue:.2f}", help="Revenue earned today")



        with col_week:

            # Calculate this week's data

            from datetime import timedelta

            week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

            week_transactions = [t for t in all_transactions 

                               if t.get('sale_date', '0000-00-00') >= week_ago]

            week_revenue = sum(float(t['total_amount']) for t in week_transactions)

            st.metric("This Week's Sales", len(week_transactions), help="Sales in last 7 days")

            st.metric("This Week's Revenue", f"MYR {week_revenue:.2f}", help="Revenue in last 7 days")



        st.divider()



        # Transaction search and filters

        col_search, col_filter = st.columns([3, 1])



        with col_search:

            search_term = st.text_input("🔍 Search Transactions", 

                                      placeholder="Customer name, transaction ID, notes...")



        with col_filter:

            date_filter = st.selectbox("📅 Filter by Date", 

                                     ["All Time", "Today", "Yesterday", "This Week", "This Month"])



        # Simple filtering logic

        filtered_transactions = all_transactions



        if search_term:

            filtered_transactions = [t for t in filtered_transactions 

                                   if search_term.lower() in str(t.get('customer_name', '')).lower()

                                   or search_term.lower() in str(t.get('notes', '')).lower()

                                   or search_term.lower() in str(t['_id']).lower()]



        if date_filter == "Today":

            filtered_transactions = [t for t in filtered_transactions if t.get('sale_date') == today_date]

        elif date_filter == "This Week":

            from datetime import timedelta

            week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

            filtered_transactions = [t for t in filtered_transactions if t.get('sale_date', '0000-00-00') >= week_ago]



        # CRITICAL: Re-sort after filtering to ensure newest transactions first

        # This ensures refunds created today appear BEFORE older sales

        filtered_transactions.sort(

            key=lambda x: x.get('sort_timestamp', x.get('created_at', x.get('timestamp', datetime.min))), 

            reverse=True

        )



        # Export all transactions section (above the list)

        if filtered_transactions:

            st.subheader("📊 Export All Sales Data")

            col_csv, col_excel, col_pdf = st.columns(3)



            with col_csv:

                csv_lines = ["Date,Transaction ID,Customer,Items,Total (MYR),Payment Method,Notes"]

                for t in filtered_transactions:

                    items_summary = "; ".join([f"{item.get('quantity', 1)}x {item.get('offering_name', 'Unknown')}" 

                                             for item in t.get('items', [])])

                    csv_lines.append(f"{t.get('sale_date', '')},{str(t['_id'])[-12:]},{t.get('customer_name') or 'Walk-in'},{items_summary},{t['total_amount']},{extract_payment_method(t.get('notes', ''))},{t.get('notes', '')}")



                csv_data = "\n".join(csv_lines)

                st.download_button(

                    "Export CSV",

                    csv_data,

                    file_name=f"sales_report_{datetime.now().strftime('%Y%m%d')}.csv",

                    mime="text/csv",

                    use_container_width=True

                )



            with col_excel:

                try:

                    excel_data = generate_sales_excel(filtered_transactions, st.session_state.business_name)

                    st.download_button(

                        "Export Excel",

                        excel_data,

                        file_name=f"sales_report_{datetime.now().strftime('%Y%m%d')}.xlsx",

                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",

                        use_container_width=True

                    )

                except Exception as e:

                    st.error(f"Excel export error: {str(e)}")



            with col_pdf:

                try:

                    if PDF_AVAILABLE:

                        # Generate actual PDF file

                        pdf_data = generate_sales_report_pdf(filtered_transactions, st.session_state.business_name)

                        st.download_button(

                            "📊 Export PDF",

                            pdf_data,

                            file_name=f"sales_report_{datetime.now().strftime('%Y%m%d')}.pdf",

                            mime="application/pdf",

                            use_container_width=True,

                            help="Download sales report as PDF"

                        )

                    else:

                        # Fallback to HTML if PDF not available

                        pdf_html = generate_sales_pdf_html(filtered_transactions, st.session_state.business_name)

                        st.download_button(

                            "📊 Export PDF (HTML)",

                            pdf_html,

                            file_name=f"sales_report_{datetime.now().strftime('%Y%m%d')}.html",

                            mime="text/html",

                            use_container_width=True,

                            help="Download as HTML file (PDF not available)"

                        )

                except Exception as e:

                    st.error(f"PDF export error: {str(e)}")



        st.divider()



        st.subheader(f"📋 Transaction List ({len(filtered_transactions)} found)")



        if not filtered_transactions:

            st.info("No transactions found matching your criteria.")

        else:

            # Header row for clarity

            header_col1, header_col2, header_col3, header_col4 = st.columns([4, 1.5, 1, 2])



            with header_col1:

                st.markdown("**📋 Transaction Details**")

            with header_col2:

                st.markdown("**Date & Time**")

            with header_col3:

                st.markdown("**💰 Total**")

            with header_col4:

                st.markdown("**📄 Receipt**")



            st.divider()



            # ========================================================================

            # DISPLAY TRANSACTIONS - Each as a completely INDEPENDENT entry

            # NO GROUPING - Refunds and Sales are displayed separately in chronological order

            # ========================================================================



            for transaction in filtered_transactions[:50]:  # Show latest 50

                # Determine transaction type

                is_refund = float(transaction['total_amount']) < 0 or 'REFUND' in transaction.get('notes', '').upper()



                # Create a container for this transaction (ensures proper isolation)

                with st.container():

                    # Create columns: [Transaction Info, Date, Total, Receipt]

                    col1, col2, col3, col4 = st.columns([4, 1.5, 1, 2])



                    with col1:

                        # Transaction details with clear type indicator

                        items_summary = ", ".join([f"{item.get('quantity', 1)}x {item.get('offering_name', 'Unknown')}" 

                                                 for item in transaction.get('items', [])])



                        if is_refund:

                            st.markdown(f"""

                            **↩️ REFUND - Transaction ID: {str(transaction['_id'])[-12:]}** 🔴  

                            **Customer:** {transaction.get('customer_name') or 'Walk-in'}  

                            **Items:** {items_summary[:60]}{'...' if len(items_summary) > 60 else ''}

                            """)

                        else:

                            st.markdown(f"""

                            **🧾 Transaction ID: {str(transaction['_id'])[-12:]}**  

                            **Customer:** {transaction.get('customer_name') or 'Walk-in'}  

                            **Items:** {items_summary[:60]}{'...' if len(items_summary) > 60 else ''}

                            """)



                        # Show notes if present (but don't create nested display)

                        if transaction.get('notes'):

                            note_text = transaction['notes'][:50] + ('...' if len(transaction.get('notes', '')) > 50 else '')

                            if is_refund:

                                st.error(f"📝 {note_text}")

                            else:

                                st.caption(f"📝 {note_text}")



                    with col2:

                        st.write(f"**Date & Time**")

                        # Display timestamp for verification of sort order

                        timestamp = transaction.get('sort_timestamp') or transaction.get('created_at') or transaction.get('timestamp')

                        if timestamp:

                            if isinstance(timestamp, str):

                                st.write(timestamp)

                            else:

                                st.write(timestamp.strftime("%Y-%m-%d %H:%M:%S"))

                        else:

                            st.write(transaction.get('sale_date', 'Unknown'))



                    with col3:

                        st.write(f"**💰 Total**")

                        amount = float(transaction['total_amount'])

                        if is_refund:

                            st.markdown(f"**:red[MYR {amount:.2f}]**")

                        else:

                            st.write(f"MYR {amount:.2f}")



                    with col4:

                        # PDF Receipt download button

                        try:

                            if PDF_AVAILABLE:

                                if is_refund:

                                    # For refunds, try to get the original transaction for detailed refund receipt

                                    if 'Original Transaction:' in transaction.get('notes', ''):

                                        try:

                                            # Extract original transaction ID from notes

                                            original_id = transaction['notes'].split('Original Transaction:')[1].strip().split('|')[0].strip()

                                            original_transaction = db.get_transaction_by_id(original_id)



                                            if original_transaction:

                                                # Generate detailed refund receipt with original transaction details

                                                pdf_data = generate_refund_receipt_pdf(

                                                    transaction, 

                                                    original_transaction, 

                                                    st.session_state.business_name

                                                )

                                            else:

                                                # Fallback to regular receipt if original not found

                                                pdf_data = generate_receipt_pdf(transaction, st.session_state.business_name)

                                        except:

                                            # Fallback to regular receipt if parsing fails

                                            pdf_data = generate_receipt_pdf(transaction, st.session_state.business_name)

                                    else:

                                        # Simple refund receipt without original transaction details

                                        pdf_data = generate_receipt_pdf(transaction, st.session_state.business_name)



                                    # Download button for refund receipt

                                    st.download_button(

                                        "↩️ Download Refund Receipt",

                                        pdf_data,

                                        file_name=f"refund_receipt_{str(transaction['_id'])[:8]}.pdf",

                                        mime="application/pdf",

                                        key=f"pdf_refund_{transaction['_id']}",

                                        use_container_width=True,

                                        help="Download refund receipt as PDF"

                                    )

                                else:

                                    # Regular sale receipt

                                    pdf_data = generate_receipt_pdf(transaction, st.session_state.business_name)



                                    # Single download button with PDF icon that instantly downloads

                                    st.download_button(

                                        "📄 Download Receipt",

                                        pdf_data,

                                        file_name=f"receipt_{str(transaction['_id'])[:8]}.pdf",

                                        mime="application/pdf",

                                        key=f"pdf_receipt_{transaction['_id']}",

                                        use_container_width=True,

                                        help="Download receipt as PDF"

                                    )

                            else:

                                # Fallback to HTML if PDF not available

                                pdf_html = generate_sales_pdf_html([transaction], st.session_state.business_name)

                                st.download_button(

                                    "📄 Download Receipt",

                                    pdf_html,

                                    file_name=f"receipt_{str(transaction['_id'])[:8]}.html",

                                    mime="text/html",

                                    key=f"html_receipt_{transaction['_id']}",

                                    use_container_width=True,

                                    help="Download receipt as HTML (PDF not available)"

                                )



                        except Exception as e:

                            # Error state - disabled button

                            st.button(

                                "📄 Receipt Unavailable", 

                                disabled=True, 

                                use_container_width=True,

                                help="Receipt generation failed"

                            )



                # Clear visual separator between EACH independent transaction

                st.divider()



            if len(filtered_transactions) > 50:

                st.info(f"Showing latest 50 transactions. Total: {len(filtered_transactions)}")



    with tab7:

        st.header("⚙️ Settings")



        # Get current business info

        business_info = db.get_business_info(st.session_state.user_id)



        if not business_info:

            st.error("Unable to load business information")

            return



        # Settings categories

        settings_tab1, settings_tab2, settings_tab3, settings_tab4, settings_tab5 = st.tabs([

            "🏢 Business Info", "🎨 Appearance", "📤 Data Export", "🔒 Security", "📱 Mobile App Installation"

        ])



        with settings_tab1:

            st.subheader("Business Information")



            with st.form("business_info_form"):

                col1, col2 = st.columns(2)



                with col1:

                    new_business_name = st.text_input(

                        "Business Name",

                        value=business_info.get("business_name", ""),

                        help="This name appears on receipts and login"

                    )



                    new_currency = st.selectbox(

                        "Base Currency",

                        ["MYR", "USD", "EUR", "SGD", "THB", "IDR", "PHP", "VND"],

                        index=["MYR", "USD", "EUR", "SGD", "THB", "IDR", "PHP", "VND"].index(

                            business_info.get("base_currency", "MYR")

                        ),

                        help="Your local currency for pricing"

                    )



                with col2:

                    business_types = ["retail", "service"]

                    current_type = business_info.get("business_type", "retail")

                    # Handle legacy business types - map old types to new categories

                    if current_type in ["street_vendor", "cafe", "restaurant"]:

                        current_type = "retail"

                    elif current_type in ["tutor", "yoga_teacher", "consultant"]:

                        current_type = "service"



                    default_index = business_types.index(current_type) if current_type in business_types else 0



                    new_business_type = st.selectbox(

                        "Business Category",

                        business_types,

                        index=default_index,

                        format_func=lambda x: "🛍️ Retail" if x == "retail" else "🔧 Service",

                        help="Your primary business category"

                    )



                new_address = st.text_area(

                    "Business Address",

                    value=business_info.get("business_address", ""),

                    placeholder="e.g., Jalan Raja Laut, Kuala Lumpur",

                    help="Optional: appears on receipts"

                )



                new_tax_id = st.text_input(

                    "Tax ID / Registration Number",

                    value=business_info.get("tax_id", ""),

                    placeholder="e.g., C-1234567890",

                    help="Optional: business registration number"

                )



                if st.form_submit_button("💾 Save Business Info", type="primary"):

                    success = db.update_business_info(

                        user_id=st.session_state.user_id,

                        business_name=new_business_name,

                        business_address=new_address,

                        tax_id=new_tax_id,

                        base_currency=new_currency

                    )



                    if success:

                        st.success("✅ Business information updated!")

                        # Update session state if business name changed

                        if new_business_name != business_info.get("business_name"):

                            st.session_state.business_name = new_business_name

                        st.rerun()

                    else:

                        st.error("❌ Failed to update business information")



        with settings_tab2:

            st.subheader("🎨 Theme & Appearance")

            # Theme system with multiple gradient options

            themes = {

                'Default': {

                    'primary': '#0d6efd',

                    'text': '#111827',

                    'background': '#FFFFFF',

                    'gradient': 'linear-gradient(180deg, #343A40 0%, #495057 50%, #6C757D 100%)'

                },

                '🌺 Dark Pink': {

                    'primary': '#D63864',

                    'text': '#E8E6E3',

                    'background': '#1A1625',

                    'gradient': 'linear-gradient(180deg, #4A1528 0%, #8B2149 50%, #D63864 100%)'

                },

                '🔥 Sunset Orange': {

                    'primary': '#E67E22',

                    'text': '#E8E6E3',

                    'background': '#1A1410',

                    'gradient': 'linear-gradient(180deg, #5C2400 0%, #A04000 50%, #E67E22 100%)'

                },

                '🌊 Ocean Teal': {

                    'primary': '#16A085',

                    'text': '#E8E6E3',

                    'background': '#0D1A1A',

                    'gradient': 'linear-gradient(180deg, #083D38 0%, #0E6655 50%, #16A085 100%)'

                },

                '🌿 Forest Green': {

                    'primary': '#27AE60',

                    'text': '#E8E6E3',

                    'background': '#0F1A10',

                    'gradient': 'linear-gradient(180deg, #145A32 0%, #1E8449 50%, #27AE60 100%)'

                },

                '🔴 Ruby Red': {

                    'primary': '#E74C3C',

                    'text': '#E8E6E3',

                    'background': '#1A0F0D',

                    'gradient': 'linear-gradient(180deg, #641E16 0%, #A93226 50%, #E74C3C 100%)'

                },

                '🌙 Midnight Blue': {

                    'primary': '#3498DB',

                    'text': '#E8E6E3',

                    'background': '#0F1419',

                    'gradient': 'linear-gradient(180deg, #1B4F72 0%, #2471A3 50%, #3498DB 100%)'

                },

                '💜 Royal Purple': {

                    'primary': '#9B59B6',

                    'text': '#E8E6E3',

                    'background': '#18121A',

                    'gradient': 'linear-gradient(180deg, #4A235A 0%, #714099 50%, #9B59B6 100%)'

                },

                '⚡ Electric Lime': {

                    'primary': '#CDDC39',

                    'text': '#E8E6E3',

                    'background': '#1A1A10',

                    'gradient': 'linear-gradient(180deg, #6C6F1A 0%, #9E9D24 50%, #CDDC39 100%)'

                }

            }



            current_theme = st.session_state.get('theme', 'Default')



            st.write("**Choose your theme:**")



            # Create a visual grid of theme cards

            cols = st.columns(3)

            theme_list = list(themes.items())



            for idx, (theme_name, colors) in enumerate(theme_list):

                col_idx = idx % 3

                with cols[col_idx]:

                    sanitized = ''.join(ch for ch in theme_name if ch.isalnum())



                    # Visual gradient preview

                    if colors['gradient']:

                        gradient_style = colors['gradient']

                    else:

                        gradient_style = f"linear-gradient(180deg, {colors['primary']} 0%, {colors['primary']} 100%)"



                    # Active indicator

                    active_border = "3px solid #FFD700" if current_theme == theme_name else "2px solid rgba(255,255,255,0.1)"

                    active_badge = "✓ " if current_theme == theme_name else ""



                    # Theme card with gradient preview

                    safe_markdown(

                        f"<div data-testid=\"theme-preview-{sanitized}\" style='"

                        f"border: {active_border}; "

                        f"border-radius: 12px; "

                        f"overflow: hidden; "

                        f"margin-bottom: 16px; "

                        f"box-shadow: 0 4px 6px rgba(0,0,0,0.3); "

                        f"cursor: pointer; "

                        f"transition: transform 0.2s;'>"

                        f"<div style='background: {gradient_style}; height: 80px;'></div>"

                        f"<div style='padding: 12px; background: rgba(0,0,0,0.3);'>"

                        f"<div style='font-weight: 600; font-size: 0.9rem; color: white; text-align: center;'>{active_badge}{theme_name}</div>"

                        f"</div>"

                        f"</div>", 

                        unsafe_allow_html=True

                    )



                    # Apply button

                    btn_key = f"theme_{sanitized}"

                    if st.button("Select", key=btn_key, disabled=(current_theme == theme_name), use_container_width=True):

                        st.session_state.theme = theme_name

                        st.rerun()



                    safe_markdown(f"<div data-testid=\"theme-apply-{sanitized}\" style=\"display:none\"></div>", unsafe_allow_html=True)



            # Theme CSS is now applied globally in main() function



            st.divider()



            # Display settings

            st.subheader("Display Settings")



            col1, col2 = st.columns(2)

            with col1:

                show_animations = st.checkbox(

                    "🎬 Enable Animations",

                    value=st.session_state.get('show_animations', True),

                    help="Show transition animations"

                )

                if show_animations != st.session_state.get('show_animations', True):

                    st.session_state.show_animations = show_animations



            with col2:

                compact_mode = st.checkbox(

                    "📱 Compact Mode",

                    value=st.session_state.get('compact_mode', False),

                    help="Reduce spacing for smaller screens"

                )

                if compact_mode != st.session_state.get('compact_mode', False):

                    st.session_state.compact_mode = compact_mode

            st.divider()




        with settings_tab3:

            st.subheader("📤 Data Export & Backup")



            st.write("**Export your business data for backup or analysis:**")



            col1, col2 = st.columns(2)



            with col1:

                st.markdown("### 📊 Quick Exports")



                if st.button("📋 Export Menu List", use_container_width=True):

                    menu_items = db.get_user_menu_items(st.session_state.user_id)

                    if menu_items:

                        export_text = "MENU LIST\n" + "="*50 + "\n"

                        for item in menu_items:

                            status = "✅ Active" if item.get('is_active') else "⏸️ Inactive"

                            export_text += f"{item['name']} - MYR {item['price']} ({status})\n"

                            if item.get('description'):

                                export_text += f"   Description: {item['description']}\n"

                            export_text += f"   Category: {item.get('category', 'other').replace('_', ' ').title()}\n\n"



                        st.text_area("Menu List (copy to save):", export_text, height=200)

                    else:

                        st.info("No menu items to export")



                if st.button("💳 Export Transaction Summary", use_container_width=True):

                    transactions = db.get_user_transactions(st.session_state.user_id, limit=100)

                    if transactions:

                        total_sales = sum(float(t['total_amount']) for t in transactions)



                        export_text = "TRANSACTION SUMMARY\n" + "="*50 + "\n"

                        export_text += f"Total Transactions: {len(transactions)}\n"

                        export_text += f"Total Revenue: MYR {total_sales:.2f}\n\n"

                        export_text += "RECENT TRANSACTIONS:\n" + "-"*30 + "\n"



                        for trans in transactions[:20]:  # Show last 20

                            date_str = str(trans.get('created_at', ''))[:16]

                            customer = trans.get('customer_name') or 'Walk-in'

                            export_text += f"{date_str} | MYR {trans['total_amount']} | {customer}\n"



                            # Show items

                            for item in trans.get('items', []):

                                export_text += f"   - {item['quantity']}x {item['offering_name']} @ MYR {item['unit_price']}\n"

                            export_text += "\n"



                        st.text_area("Transaction Summary (copy to save):", export_text, height=200)

                    else:

                        st.info("No transactions to export")



            with col2:

                st.markdown("### 🎯 Complete Backup")



                if st.button("💾 Full Data Export", type="primary", use_container_width=True):

                    with st.spinner("Preparing complete backup..."):

                        export_data = db.export_all_data(st.session_state.user_id)



                        if export_data:

                            # Show summary

                            st.success("✅ Backup created successfully!")



                            st.markdown("**Backup Contents:**")

                            st.write(f"📊 Business Info: ✅ Included")

                            st.write(f"🛍️ Offerings: {export_data.get('total_menu_items', 0)} items")  

                            st.write(f"💳 Transactions: {export_data.get('total_transactions', 0)} records")

                            st.write(f"👥 Customers: {export_data.get('total_customers', 0)} customers")

                            st.write(f"📅 Export Date: {export_data.get('export_timestamp', 'N/A')[:16]}")



                            # Download options

                            import json

                            from io import BytesIO



                            col1, col2 = st.columns(2)



                            with col1:

                                # JSON export

                                json_str = json.dumps(export_data, indent=2, default=str)

                                st.download_button(

                                    label="📄 Download as JSON",

                                    data=json_str,

                                    file_name=f"{business_info['business_name']}_backup_{datetime.now().strftime('%Y%m%d_%H%M')}.json",

                                    mime="application/json",

                                    use_container_width=True

                                )



                            with col2:

                                # Excel export

                                try:

                                    output = BytesIO()

                                    with pd.ExcelWriter(output, engine='openpyxl') as writer:

                                        # Business Info sheet

                                        if export_data.get('business_info'):

                                            biz_df = pd.DataFrame([export_data['business_info']])

                                            biz_df.to_excel(writer, sheet_name='Business Info', index=False)



                                        # Menu Items sheet

                                        if export_data.get('menu_items'):

                                            menu_df = pd.DataFrame(export_data['menu_items'])

                                            if '_id' in menu_df.columns:

                                                menu_df['_id'] = menu_df['_id'].astype(str)

                                            menu_df.to_excel(writer, sheet_name='Menu Items', index=False)



                                        # Transactions sheet

                                        if export_data.get('transactions'):

                                            trans_df = pd.DataFrame(export_data['transactions'])

                                            if '_id' in trans_df.columns:

                                                trans_df['_id'] = trans_df['_id'].astype(str)

                                            trans_df.to_excel(writer, sheet_name='Transactions', index=False)



                                        # Customers sheet

                                        if export_data.get('customers'):

                                            cust_df = pd.DataFrame(export_data['customers'])

                                            if '_id' in cust_df.columns:

                                                cust_df['_id'] = cust_df['_id'].astype(str)

                                            cust_df.to_excel(writer, sheet_name='Customers', index=False)



                                    excel_data = output.getvalue()

                                    st.download_button(

                                        label="� Download as Excel",

                                        data=excel_data,

                                        file_name=f"{business_info['business_name']}_backup_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",

                                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",

                                        use_container_width=True

                                    )

                                except Exception as e:

                                    st.error(f"Excel export error: {e}")

                                    st.caption("Install openpyxl: pip install openpyxl")



                            st.info("💡 **Tip:** JSON format preserves all data structure. Excel format is easier to view and analyze.")



                        else:

                            st.error("❌ Failed to create backup")



                st.markdown("### ⚠️ Data Management")



                st.warning("**Danger Zone** - These actions cannot be undone!")



                if st.button("🗑️ Clear All Transaction History", type="secondary", use_container_width=True):

                    st.error("🚧 This feature requires additional confirmation - coming soon!")



                if st.button("🔄 Reset All Settings", type="secondary", use_container_width=True):

                    st.error("🚧 This feature requires additional confirmation - coming soon!")



        with settings_tab4:

            st.subheader("🔒 Security Settings")



            st.markdown("### 🔑 Change PIN")



            with st.form("change_pin_form"):

                col1, col2 = st.columns(2)



                with col1:

                    current_pin = st.text_input(

                        "Current PIN",

                        type="password",

                        max_chars=4,

                        help="Enter your current 4-digit PIN"

                    )



                with col2:

                    new_pin = st.text_input(

                        "New PIN", 

                        type="password",

                        max_chars=4,

                        help="Enter your new 4-digit PIN"

                    )



                confirm_pin = st.text_input(

                    "Confirm New PIN",

                    type="password", 

                    max_chars=4,

                    help="Re-enter your new PIN"

                )



                if st.form_submit_button("🔑 Update PIN", type="primary"):

                    # Validation

                    if not current_pin or len(current_pin) != 4 or not current_pin.isdigit():

                        st.error("❌ Current PIN must be exactly 4 digits")

                    elif not new_pin or len(new_pin) != 4 or not new_pin.isdigit():

                        st.error("❌ New PIN must be exactly 4 digits")

                    elif new_pin != confirm_pin:

                        st.error("❌ New PINs do not match")

                    else:

                        # Verify current PIN first

                        if db.validate_pin(business_info['business_name'], current_pin):

                            # Update PIN

                            success = db.update_business_pin(st.session_state.user_id, new_pin)

                            if success:

                                st.success("✅ PIN updated successfully!")

                            else:

                                st.error("❌ Failed to update PIN")

                        else:

                            st.error("❌ Current PIN is incorrect")



            st.divider()

            st.markdown("### 📧 Account Recovery Contact")
            st.info("💡 Set up recovery contact to help you recover your business name or reset PIN if forgotten")

            # Show current recovery contacts if they exist
            current_email = business_info.get('recovery_email', '')
            current_phone = business_info.get('recovery_phone', '')

            if current_email or current_phone:
                st.success("✅ Recovery contacts configured")
                if current_email:
                    st.caption(f"📧 Email: {current_email}")
                if current_phone:
                    st.caption(f"📱 Phone: {current_phone}")
            else:
                st.warning("⚠️ No recovery contacts set up yet")

            with st.form("recovery_contact_form"):
                recovery_email = st.text_input(
                    "Recovery Email",
                    value=current_email,
                    placeholder="your.email@example.com",
                    help="Email for account recovery"
                )

                recovery_phone = st.text_input(
                    "Recovery Phone",
                    value=current_phone,
                    placeholder="+60123456789",
                    help="Phone number for account recovery"
                )

                if st.form_submit_button("💾 Save Recovery Contacts", type="primary"):
                    if not recovery_email and not recovery_phone:
                        st.error("❌ Please provide at least one recovery contact")
                    else:
                        success = db.update_recovery_contact(
                            st.session_state.user_id,
                            email=recovery_email if recovery_email else None,
                            phone=recovery_phone if recovery_phone else None
                        )
                        if success:
                            st.success("✅ Recovery contacts updated successfully!")
                            st.info("🔒 You can now use these to recover your account if needed")
                            st.rerun()
                        else:
                            st.error("❌ Failed to update recovery contacts")



            st.divider()



            st.markdown("### 🛡️ Account Security")



            col1, col2 = st.columns(2)



            with col1:

                st.info(f"**Account Created:** {str(business_info.get('created_at', 'Unknown'))[:16]}")

                st.info(f"**Last Updated:** {str(business_info.get('updated_at', 'Unknown'))[:16]}")



            with col2:

                if st.button("🔄 Logout All Devices", help="Force logout from all sessions"):

                    st.info("🚧 Multi-device logout coming soon!")



                if st.button("📱 Enable 2FA", help="Two-factor authentication"):

                    st.info("🚧 Two-factor authentication coming soon!")



            st.divider()



            st.markdown("### ⚠️ Account Actions")

            st.warning("**Danger Zone** - These actions are permanent!")



            if st.button("🗑️ Delete Account", type="secondary", help="Permanently delete your business account"):

                st.error("🚧 Account deletion requires email verification - coming soon!")



        with settings_tab5:

            st.subheader("📱 Mobile App Installation")

            st.info("💡 Install Portable POS as a mobile app for quick access and offline capability!")



            col1, col2 = st.columns([2, 1])



            with col1:

                st.markdown("""

                **Benefits of installing:**

                - 🚀 Launch instantly from home screen

                - 📡 Work offline with cached data

                - 💾 Smaller data usage

                - 🔋 Better battery performance

                - 📲 Native app experience

                """)



            with col2:

                st.markdown("**How to install:**")

                st.caption("**Android:**")

                st.caption("Tap menu ⋮ → 'Install app'")

                st.caption("**iPhone:**")

                st.caption("Tap Share 📤 → 'Add to Home Screen'")

                st.caption("**Desktop:**")

                st.caption("Click install icon in address bar")



            # PWA Install button with JavaScript

            install_html = """

            <script>

                function installPWA() {

                    if (window.deferredPrompt) {

                        window.deferredPrompt.prompt();

                        window.deferredPrompt.userChoice.then((choiceResult) => {

                            if (choiceResult.outcome === 'accepted') {

                                alert('✅ Thank you for installing Portable POS!');

                            }

                            window.deferredPrompt = null;

                        });

                    } else if (window.navigator.standalone === true || window.matchMedia('(display-mode: standalone)').matches) {

                        alert('✅ App is already installed!');

                    } else {

                        alert('📱 To install:\\n\\n🤖 Android: Tap menu (⋮) → Install app\\n🍎 iPhone: Tap Share (📤) → Add to Home Screen');

                    }

                }

            </script>

            <button onclick="installPWA()" style="

                background: linear-gradient(135deg, #D63864 0%, #8B2149 100%);

                color: white;

                border: none;

                padding: 12px 24px;

                font-size: 16px;

                font-weight: 600;

                border-radius: 8px;

                cursor: pointer;

                width: 100%;

                transition: transform 0.2s;

            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">

                📱 Install as Mobile App

            </button>

            """

            st.components.v1.html(install_html, height=80)



            # Check if running as PWA

            pwa_check_html = """

            <script>

                if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true) {

                    document.write('<div style="background: #2ecc71; color: white; padding: 10px; border-radius: 6px; text-align: center; margin-top: 10px;">✅ Running as installed app!</div>');

                }

            </script>

            """

            st.components.v1.html(pwa_check_html, height=50)



# ============================================================================

# MAIN APP ROUTER

# ============================================================================



def main():

    """Main app logic - routes to correct page based on login state"""



    # Apply global theme (persists across sessions and logout)

    apply_global_theme()



    # Development mode auto-login (for development convenience)

    if st.session_state.dev_mode and not st.session_state.logged_in:

        # Try to restore last session

        if hasattr(st.session_state, 'last_user_id') and hasattr(st.session_state, 'last_business_name'):

            st.session_state.logged_in = True

            st.session_state.user_id = st.session_state.last_user_id

            st.session_state.business_name = st.session_state.last_business_name



    # Sidebar navigation

    st.sidebar.title("🏪 Portable POS")



    # Development mode indicator in sidebar

    if st.session_state.dev_mode:

        st.sidebar.success("🔧 **Development Mode Active**")

        st.sidebar.caption("You'll stay logged in during code changes")



    if st.session_state.logged_in:

        # User is logged in - show dashboard

        st.sidebar.success(f"👤 Logged in as: **{st.session_state.business_name}**")



        # Dev mode checkbox in sidebar

        dev_mode = st.sidebar.checkbox(

            "🔧 Dev mode",

            value=st.session_state.dev_mode,

            help="Stay logged in during code changes"

        )

        if dev_mode != st.session_state.dev_mode:

            st.session_state.dev_mode = dev_mode



        # Store session for dev mode persistence

        st.session_state.last_user_id = st.session_state.user_id

        st.session_state.last_business_name = st.session_state.business_name



        show_dashboard()

    else:

        # User not logged in - show register/login options

        st.sidebar.info("Please register or login to continue")



        # Quick dev login option in sidebar

        if st.sidebar.button("🔧 Quick Dev Login", help="Login as RetailDemo for development"):

            # Try to login with RetailDemo account

            demo_user_id = db.validate_pin("RetailDemo", "1234")

            if demo_user_id:

                st.session_state.logged_in = True

                st.session_state.user_id = demo_user_id

                st.session_state.business_name = "RetailDemo"

                st.session_state.dev_mode = True

                st.rerun()

            else:

                st.sidebar.error("RetailDemo account not found. Please run update_demo_accounts.py first.")



        # Check if recovering account
        if 'page' in st.session_state and st.session_state.page in ['forgot_business_name', 'forgot_pin']:
            if st.session_state.page == 'forgot_business_name':
                show_forgot_business_name()
            else:
                show_forgot_pin()
        else:
            page = st.sidebar.radio(

                "Choose an option:",  # Label

                ["Login", "Register"],  # Options

                label_visibility="collapsed"  # Hide label (already shown above)

            )



            if page == "Register":

                show_register_page()

            else:  # Login

                show_login_page()



# Run the app

if __name__ == "__main__":

    main()





